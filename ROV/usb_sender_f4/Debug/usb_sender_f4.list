
usb_sender_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b0  080074b0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b8  080074b8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074bc  080074bc  000174bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080074c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  200000fc  080075bc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  080075bc  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f609  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc9  00000000  00000000  0002f735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00032300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00032f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001962a  00000000  00000000  00033a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001187e  00000000  00000000  0004d052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093011  00000000  00000000  0005e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f18e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  000f1934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800742c 	.word	0x0800742c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800742c 	.word	0x0800742c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 f9fd 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f837 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f8ef 	bl	80006dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004fe:	f006 fa59 	bl	80069b4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000502:	f000 f899 	bl	8000638 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  char *data1 = "bir\n";
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <main+0x70>)
 8000508:	60fb      	str	r3, [r7, #12]
  char *data2 = "iki\n";
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <main+0x74>)
 800050c:	60bb      	str	r3, [r7, #8]
  char *data3 = "uc\n";
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <main+0x78>)
 8000510:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  CDC_Transmit_FS((uint8_t *)data1, strlen(data1));
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f7ff fe60 	bl	80001d8 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29b      	uxth	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	f006 fb06 	bl	8006b30 <CDC_Transmit_FS>
	  HAL_Delay(10);
 8000524:	200a      	movs	r0, #10
 8000526:	f000 fa55 	bl	80009d4 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)data2, strlen(data2));
 800052a:	68b8      	ldr	r0, [r7, #8]
 800052c:	f7ff fe54 	bl	80001d8 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	b29b      	uxth	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f006 fafa 	bl	8006b30 <CDC_Transmit_FS>
	  HAL_Delay(10);
 800053c:	200a      	movs	r0, #10
 800053e:	f000 fa49 	bl	80009d4 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)data3, strlen(data3));
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff fe48 	bl	80001d8 <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29b      	uxth	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f006 faee 	bl	8006b30 <CDC_Transmit_FS>
	  HAL_Delay(10);
 8000554:	200a      	movs	r0, #10
 8000556:	f000 fa3d 	bl	80009d4 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)data1, strlen(data1));
 800055a:	e7da      	b.n	8000512 <main+0x26>
 800055c:	08007444 	.word	0x08007444
 8000560:	0800744c 	.word	0x0800744c
 8000564:	08007454 	.word	0x08007454

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 ff50 	bl	800741c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005d8:	230f      	movs	r3, #15
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005dc:	2390      	movs	r3, #144	; 0x90
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005e4:	2305      	movs	r3, #5
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f99b 	bl	8002928 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f898 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2101      	movs	r1, #1
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fbfd 	bl	8002e18 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 f882 	bl	800072c <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000698:	f000 f9c0 	bl	8000a1c <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f843 	bl	800072c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006ae:	2307      	movs	r3, #7
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006b8:	f000 f9f4 	bl	8000aa4 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 f833 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000118 	.word	0x20000118
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_ADC_MspInit+0x7c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d127      	bne.n	80007fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e2:	2301      	movs	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e6:	2303      	movs	r3, #3
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007f6:	f000 fc95 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40012000 	.word	0x40012000
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f89a 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <OTG_FS_IRQHandler+0x10>)
 800086a:	f000 ff2f 	bl	80016cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20001644 	.word	0x20001644

08000878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c6:	f7ff ffd7 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f006 fd83 	bl	80073d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fe0d 	bl	80004ec <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80008e0:	080074c0 	.word	0x080074c0
  ldr r2, =_sbss
 80008e4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80008e8:	20001d70 	.word	0x20001d70

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 fbc1 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff ff08 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fbd9 	bl	800110a <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000970:	f000 fba1 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000160 	.word	0x20000160

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000160 	.word	0x20000160

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e033      	b.n	8000a9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d109      	bne.n	8000a4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fea4 	bl	8000788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d118      	bne.n	8000a8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a62:	f023 0302 	bic.w	r3, r3, #2
 8000a66:	f043 0202 	orr.w	r2, r3, #2
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f94a 	bl	8000d08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f023 0303 	bic.w	r3, r3, #3
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8a:	e001      	b.n	8000a90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d101      	bne.n	8000ac0 <HAL_ADC_ConfigChannel+0x1c>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e113      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0x244>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b09      	cmp	r3, #9
 8000ace:	d925      	bls.n	8000b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68d9      	ldr	r1, [r3, #12]
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b1e      	subs	r3, #30
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43da      	mvns	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	400a      	ands	r2, r1
 8000af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68d9      	ldr	r1, [r3, #12]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	4603      	mov	r3, r0
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4403      	add	r3, r0
 8000b0e:	3b1e      	subs	r3, #30
 8000b10:	409a      	lsls	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	e022      	b.n	8000b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6919      	ldr	r1, [r3, #16]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	2207      	movs	r2, #7
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6919      	ldr	r1, [r3, #16]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	4603      	mov	r3, r0
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4403      	add	r3, r0
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d824      	bhi.n	8000bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	3b05      	subs	r3, #5
 8000b7c:	221f      	movs	r2, #31
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	400a      	ands	r2, r1
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3b05      	subs	r3, #5
 8000ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	e04c      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b0c      	cmp	r3, #12
 8000bba:	d824      	bhi.n	8000c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	3b23      	subs	r3, #35	; 0x23
 8000bce:	221f      	movs	r2, #31
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43da      	mvns	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	400a      	ands	r2, r1
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3b23      	subs	r3, #35	; 0x23
 8000bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	631a      	str	r2, [r3, #48]	; 0x30
 8000c04:	e023      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	3b41      	subs	r3, #65	; 0x41
 8000c18:	221f      	movs	r2, #31
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	400a      	ands	r2, r1
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b41      	subs	r3, #65	; 0x41
 8000c42:	fa00 f203 	lsl.w	r2, r0, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_ADC_ConfigChannel+0x250>)
 8000c50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_ADC_ConfigChannel+0x254>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d10f      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1d8>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b12      	cmp	r3, #18
 8000c62:	d10b      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_ADC_ConfigChannel+0x254>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12b      	bne.n	8000cde <HAL_ADC_ConfigChannel+0x23a>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <HAL_ADC_ConfigChannel+0x258>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d003      	beq.n	8000c98 <HAL_ADC_ConfigChannel+0x1f4>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b11      	cmp	r3, #17
 8000c96:	d122      	bne.n	8000cde <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_ADC_ConfigChannel+0x258>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d111      	bne.n	8000cde <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_ConfigChannel+0x25c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_ADC_ConfigChannel+0x260>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	0c9a      	lsrs	r2, r3, #18
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000cd0:	e002      	b.n	8000cd8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f9      	bne.n	8000cd2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	40012300 	.word	0x40012300
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	10000012 	.word	0x10000012
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83

08000d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d10:	4b79      	ldr	r3, [pc, #484]	; (8000ef8 <ADC_Init+0x1f0>)
 8000d12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6859      	ldr	r1, [r3, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	021a      	lsls	r2, r3, #8
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6899      	ldr	r1, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	4a58      	ldr	r2, [pc, #352]	; (8000efc <ADC_Init+0x1f4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d022      	beq.n	8000de6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6899      	ldr	r1, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6899      	ldr	r1, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	e00f      	b.n	8000e06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0202 	bic.w	r2, r2, #2
 8000e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6899      	ldr	r1, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7e1b      	ldrb	r3, [r3, #24]
 8000e20:	005a      	lsls	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d01b      	beq.n	8000e6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	035a      	lsls	r2, r3, #13
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	e007      	b.n	8000e7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	051a      	lsls	r2, r3, #20
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6899      	ldr	r1, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ebe:	025a      	lsls	r2, r3, #9
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6899      	ldr	r1, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	029a      	lsls	r2, r3, #10
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	609a      	str	r2, [r3, #8]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40012300 	.word	0x40012300
 8000efc:	0f000001 	.word	0x0f000001

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e159      	b.n	80013f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8148 	bne.w	80013ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a2 	beq.w	80013ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b57      	ldr	r3, [pc, #348]	; (800140c <HAL_GPIO_Init+0x2e8>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a56      	ldr	r2, [pc, #344]	; (800140c <HAL_GPIO_Init+0x2e8>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b54      	ldr	r3, [pc, #336]	; (800140c <HAL_GPIO_Init+0x2e8>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x2ec>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x202>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_GPIO_Init+0x2f4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x1fe>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a47      	ldr	r2, [pc, #284]	; (800141c <HAL_GPIO_Init+0x2f8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x1fa>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_GPIO_Init+0x2fc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x1f6>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a45      	ldr	r2, [pc, #276]	; (8001424 <HAL_GPIO_Init+0x300>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x1f2>
 8001312:	2304      	movs	r3, #4
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x204>
 8001316:	2307      	movs	r3, #7
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x204>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x204>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x204>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x204>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x2ec>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <HAL_GPIO_Init+0x304>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <HAL_GPIO_Init+0x304>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_GPIO_Init+0x304>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a24      	ldr	r2, [pc, #144]	; (8001428 <HAL_GPIO_Init+0x304>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_GPIO_Init+0x304>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_GPIO_Init+0x304>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_GPIO_Init+0x304>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_GPIO_Init+0x304>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f aea2 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b08f      	sub	sp, #60	; 0x3c
 8001430:	af0a      	add	r7, sp, #40	; 0x28
 8001432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e10f      	b.n	800165e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f005 fcb1 	bl	8006dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f001 ff98 	bl	80033b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	687e      	ldr	r6, [r7, #4]
 800148a:	466d      	mov	r5, sp
 800148c:	f106 0410 	add.w	r4, r6, #16
 8001490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001498:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149c:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a0:	1d33      	adds	r3, r6, #4
 80014a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f001 fe6f 	bl	8003188 <USB_CoreInit>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0d0      	b.n	800165e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 ff86 	bl	80033d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e04a      	b.n	8001564 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	333d      	adds	r3, #61	; 0x3d
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	333c      	adds	r3, #60	; 0x3c
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b298      	uxth	r0, r3
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3344      	adds	r3, #68	; 0x44
 800150a:	4602      	mov	r2, r0
 800150c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3340      	adds	r3, #64	; 0x40
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3348      	adds	r3, #72	; 0x48
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	334c      	adds	r3, #76	; 0x4c
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3301      	adds	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	d3af      	bcc.n	80014ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e044      	b.n	80015fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3b5      	bcc.n	8001574 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	687e      	ldr	r6, [r7, #4]
 8001610:	466d      	mov	r5, sp
 8001612:	f106 0410 	add.w	r4, r6, #16
 8001616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001622:	e885 0003 	stmia.w	r5, {r0, r1}
 8001626:	1d33      	adds	r3, r6, #4
 8001628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162a:	6838      	ldr	r0, [r7, #0]
 800162c:	f001 ff1e 	bl	800346c <USB_DevInit>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2202      	movs	r2, #2
 800163a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00d      	b.n	800165e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f86d 	bl	8004736 <USB_DevDisconnect>

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001666 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_PCD_Start+0x1c>
 800167e:	2302      	movs	r3, #2
 8001680:	e020      	b.n	80016c4 <HAL_PCD_Start+0x5e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	2b01      	cmp	r3, #1
 8001690:	d109      	bne.n	80016a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 fe70 	bl	8003390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f81d 	bl	80046f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b08d      	sub	sp, #52	; 0x34
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f8db 	bl	800489e <USB_GetMode>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 848a 	bne.w	8002004 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 f83f 	bl	8004778 <USB_ReadInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8480 	beq.w	8002002 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f82c 	bl	8004778 <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d107      	bne.n	800173a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f002 0202 	and.w	r2, r2, #2
 8001738:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f003 f81a 	bl	8004778 <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b10      	cmp	r3, #16
 800174c:	d161      	bne.n	8001812 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0210 	bic.w	r2, r2, #16
 800175c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f003 020f 	and.w	r2, r3, #15
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	3304      	adds	r3, #4
 800177c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	0c5b      	lsrs	r3, r3, #17
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	2b02      	cmp	r3, #2
 8001788:	d124      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d035      	beq.n	8001802 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f002 fe51 	bl	8004450 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ba:	441a      	add	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017cc:	441a      	add	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	621a      	str	r2, [r3, #32]
 80017d2:	e016      	b.n	8001802 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	0c5b      	lsrs	r3, r3, #17
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d110      	bne.n	8001802 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017e6:	2208      	movs	r2, #8
 80017e8:	4619      	mov	r1, r3
 80017ea:	6a38      	ldr	r0, [r7, #32]
 80017ec:	f002 fe30 	bl	8004450 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fc:	441a      	add	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0210 	orr.w	r2, r2, #16
 8001810:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 ffae 	bl	8004778 <USB_ReadInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001826:	f040 80a7 	bne.w	8001978 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 ffb3 	bl	800479e <USB_ReadDevAllOutEpInterrupt>
 8001838:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800183a:	e099      	b.n	8001970 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 808e 	beq.w	8001964 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f002 ffd7 	bl	8004806 <USB_ReadDevOutEPInterrupt>
 8001858:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001870:	461a      	mov	r2, r3
 8001872:	2301      	movs	r3, #1
 8001874:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fec3 	bl	8002604 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00c      	beq.n	80018a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001894:	461a      	mov	r2, r3
 8001896:	2308      	movs	r3, #8
 8001898:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800189a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 ff99 	bl	80027d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b8:	461a      	mov	r2, r3
 80018ba:	2310      	movs	r3, #16
 80018bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d030      	beq.n	800192a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d109      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	3304      	adds	r3, #4
 80018fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	78db      	ldrb	r3, [r3, #3]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2200      	movs	r2, #0
 800190a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f005 fb50 	bl	8006fb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001924:	461a      	mov	r2, r3
 8001926:	2302      	movs	r3, #2
 8001928:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001940:	461a      	mov	r2, r3
 8001942:	2320      	movs	r3, #32
 8001944:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195c:	461a      	mov	r2, r3
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	3301      	adds	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f af62 	bne.w	800183c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fefb 	bl	8004778 <USB_ReadInterrupts>
 8001982:	4603      	mov	r3, r0
 8001984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800198c:	f040 80db 	bne.w	8001b46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ff1c 	bl	80047d2 <USB_ReadDevAllInEpInterrupt>
 800199a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019a0:	e0cd      	b.n	8001b3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80c2 	beq.w	8001b32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 ff42 	bl	8004842 <USB_ReadDevInEPInterrupt>
 80019be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d057      	beq.n	8001a7a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	2201      	movs	r2, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69f9      	ldr	r1, [r7, #28]
 80019e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019ea:	4013      	ands	r3, r2
 80019ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019fa:	461a      	mov	r2, r3
 80019fc:	2301      	movs	r3, #1
 80019fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d132      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4403      	add	r3, r0
 8001a28:	3348      	adds	r3, #72	; 0x48
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4419      	add	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4403      	add	r3, r0
 8001a3c:	334c      	adds	r3, #76	; 0x4c
 8001a3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d113      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x3a2>
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3354      	adds	r3, #84	; 0x54
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d108      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a66:	461a      	mov	r2, r3
 8001a68:	2101      	movs	r1, #1
 8001a6a:	f002 ff49 	bl	8004900 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f005 fa24 	bl	8006ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a90:	461a      	mov	r2, r3
 8001a92:	2308      	movs	r3, #8
 8001a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aac:	461a      	mov	r2, r3
 8001aae:	2310      	movs	r3, #16
 8001ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2340      	movs	r3, #64	; 0x40
 8001acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ada:	6a38      	ldr	r0, [r7, #32]
 8001adc:	f001 fe2a 	bl	8003734 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	3338      	adds	r3, #56	; 0x38
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	78db      	ldrb	r3, [r3, #3]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2200      	movs	r2, #0
 8001b00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f005 fa67 	bl	8006fdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fcdb 	bl	80024e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f af2e 	bne.w	80019a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fe14 	bl	8004778 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b5a:	d122      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b82:	2100      	movs	r1, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fec3 	bl	8002910 <HAL_PCDEx_LPM_Callback>
 8001b8a:	e002      	b.n	8001b92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f005 fa05 	bl	8006f9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fde6 	bl	8004778 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bb6:	d112      	bne.n	8001bde <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d102      	bne.n	8001bce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f005 f9c1 	bl	8006f50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bdc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fdc8 	bl	8004778 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf2:	f040 80b7 	bne.w	8001d64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2110      	movs	r1, #16
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 fd8f 	bl	8003734 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1a:	e046      	b.n	8001caa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c40:	0151      	lsls	r1, r2, #5
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	440a      	add	r2, r1
 8001c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c74:	0151      	lsls	r1, r2, #5
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	440a      	add	r2, r1
 8001c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c94:	0151      	lsls	r1, r2, #5
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	440a      	add	r2, r1
 8001c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ca2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3b3      	bcc.n	8001c1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d016      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce0:	f043 030b 	orr.w	r3, r3, #11
 8001ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f043 030b 	orr.w	r3, r3, #11
 8001cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfc:	e015      	b.n	8001d2a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d10:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d24:	f043 030b 	orr.w	r3, r3, #11
 8001d28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f002 fdd6 	bl	8004900 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fd05 	bl	8004778 <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d78:	d124      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fd9b 	bl	80048ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fd50 	bl	800382e <USB_GetDevSpeed>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681c      	ldr	r4, [r3, #0]
 8001d9a:	f001 f9e9 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8001d9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f001 fa4f 	bl	800324c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f005 f8af 	bl	8006f12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fcd5 	bl	8004778 <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d10a      	bne.n	8001dee <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f005 f88c 	bl	8006ef6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f002 0208 	and.w	r2, r2, #8
 8001dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fcc0 	bl	8004778 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d122      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0e:	2301      	movs	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	e014      	b.n	8001e3e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fb27 	bl	8002486 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3e5      	bcc.n	8001e14 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fc93 	bl	8004778 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e5c:	d13b      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5e:	2301      	movs	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e02b      	b.n	8001ebc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3340      	adds	r3, #64	; 0x40
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d115      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da12      	bge.n	8001eb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333f      	adds	r3, #63	; 0x3f
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fae8 	bl	8002486 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	3301      	adds	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3ce      	bcc.n	8001e64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fc4c 	bl	8004778 <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eea:	d155      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eec:	2301      	movs	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e045      	b.n	8001f7e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12e      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da2b      	bge.n	8001f78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d121      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f74:	6053      	str	r3, [r2, #4]
            break;
 8001f76:	e007      	b.n	8001f88 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d3b4      	bcc.n	8001ef2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fbeb 	bl	8004778 <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fac:	d10a      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f005 f826 	bl	8007000 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fbd5 	bl	8004778 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d115      	bne.n	8002004 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f005 f816 	bl	800701c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	e000      	b.n	8002004 <HAL_PCD_IRQHandler+0x938>
      return;
 8002002:	bf00      	nop
    }
  }
}
 8002004:	3734      	adds	r7, #52	; 0x34
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}

0800200a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_PCD_SetAddress+0x1a>
 8002020:	2302      	movs	r3, #2
 8002022:	e013      	b.n	800204c <HAL_PCD_SetAddress+0x42>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f002 fb33 	bl	80046a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4603      	mov	r3, r0
 8002064:	70fb      	strb	r3, [r7, #3]
 8002066:	460b      	mov	r3, r1
 8002068:	803b      	strh	r3, [r7, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0f      	bge.n	800209a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00f      	b.n	80020ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020c6:	883a      	ldrh	r2, [r7, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	78ba      	ldrb	r2, [r7, #2]
 80020d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020e4:	78bb      	ldrb	r3, [r7, #2]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d102      	bne.n	80020f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_PCD_EP_Open+0xaa>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e00e      	b.n	800211c <HAL_PCD_EP_Open+0xc8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fbb3 	bl	8003878 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800211a:	7afb      	ldrb	r3, [r7, #11]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	da0f      	bge.n	8002158 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 020f 	and.w	r2, r3, #15
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	3338      	adds	r3, #56	; 0x38
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	705a      	strb	r2, [r3, #1]
 8002156:	e00f      	b.n	8002178 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 020f 	and.w	r2, r3, #15
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_PCD_EP_Close+0x6e>
 800218e:	2302      	movs	r3, #2
 8002190:	e00e      	b.n	80021b0 <HAL_PCD_EP_Close+0x8c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 fbf1 	bl	8003988 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	460b      	mov	r3, r1
 80021c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	b2da      	uxtb	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6979      	ldr	r1, [r7, #20]
 800222c:	f001 fed0 	bl	8003fd0 <USB_EP0StartXfer>
 8002230:	e008      	b.n	8002244 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f001 fc7e 	bl	8003b40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002270:	681b      	ldr	r3, [r3, #0]
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	460b      	mov	r3, r1
 800228c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 020f 	and.w	r2, r3, #15
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	3338      	adds	r3, #56	; 0x38
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	3304      	adds	r3, #4
 80022a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2201      	movs	r2, #1
 80022bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	6979      	ldr	r1, [r7, #20]
 80022f0:	f001 fe6e 	bl	8003fd0 <USB_EP0StartXfer>
 80022f4:	e008      	b.n	8002308 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	f001 fc1c 	bl	8003b40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	d901      	bls.n	8002330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e050      	b.n	80023d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	da0f      	bge.n	8002358 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3338      	adds	r3, #56	; 0x38
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	705a      	strb	r2, [r3, #1]
 8002356:	e00d      	b.n	8002374 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_PCD_EP_SetStall+0x82>
 8002390:	2302      	movs	r3, #2
 8002392:	e01e      	b.n	80023d2 <HAL_PCD_EP_SetStall+0xc0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68f9      	ldr	r1, [r7, #12]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 f8ac 	bl	8004500 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	b2d9      	uxtb	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c2:	461a      	mov	r2, r3
 80023c4:	f002 fa9c 	bl	8004900 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d901      	bls.n	80023f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e042      	b.n	800247e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da0f      	bge.n	8002420 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	3338      	adds	r3, #56	; 0x38
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	705a      	strb	r2, [r3, #1]
 800241e:	e00f      	b.n	8002440 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_PCD_EP_ClrStall+0x86>
 800245c:	2302      	movs	r3, #2
 800245e:	e00e      	b.n	800247e <HAL_PCD_EP_ClrStall+0xa4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	4618      	mov	r0, r3
 8002470:	f002 f8b4 	bl	80045dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da0c      	bge.n	80024b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 020f 	and.w	r2, r3, #15
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	3338      	adds	r3, #56	; 0x38
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	3304      	adds	r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e00c      	b.n	80024ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 fed3 	bl	8004280 <USB_EPStopXfer>
 80024da:	4603      	mov	r3, r0
 80024dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024de:	7afb      	ldrb	r3, [r7, #11]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	3338      	adds	r3, #56	; 0x38
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	429a      	cmp	r2, r3
 800251a:	d901      	bls.n	8002520 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e06c      	b.n	80025fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	429a      	cmp	r2, r3
 8002534:	d902      	bls.n	800253c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	3303      	adds	r3, #3
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002544:	e02b      	b.n	800259e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	d902      	bls.n	8002562 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3303      	adds	r3, #3
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6919      	ldr	r1, [r3, #16]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800257a:	b2db      	uxtb	r3, r3
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4603      	mov	r3, r0
 8002580:	6978      	ldr	r0, [r7, #20]
 8002582:	f001 ff27 	bl	80043d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	441a      	add	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d809      	bhi.n	80025c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025bc:	429a      	cmp	r2, r3
 80025be:	d203      	bcs.n	80025c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1be      	bne.n	8002546 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d811      	bhi.n	80025f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	2201      	movs	r2, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	6939      	ldr	r1, [r7, #16]
 80025f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025f4:	4013      	ands	r3, r2
 80025f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	333c      	adds	r3, #60	; 0x3c
 800261c:	3304      	adds	r3, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d17b      	bne.n	8002732 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4a61      	ldr	r2, [pc, #388]	; (80027cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	f240 80b9 	bls.w	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80b3 	beq.w	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266c:	6093      	str	r3, [r2, #8]
 800266e:	e0a7      	b.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002686:	461a      	mov	r2, r3
 8002688:	2320      	movs	r3, #32
 800268a:	6093      	str	r3, [r2, #8]
 800268c:	e098      	b.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 8093 	bne.w	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d90f      	bls.n	80026c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b8:	461a      	mov	r2, r3
 80026ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026be:	6093      	str	r3, [r2, #8]
 80026c0:	e07e      	b.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	3304      	adds	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	0159      	lsls	r1, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	440b      	add	r3, r1
 80026e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d114      	bne.n	8002724 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800270c:	461a      	mov	r2, r3
 800270e:	2101      	movs	r1, #1
 8002710:	f002 f8f6 	bl	8004900 <USB_EP0_OutStart>
 8002714:	e006      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f004 fbae 	bl	8006e8c <HAL_PCD_DataOutStageCallback>
 8002730:	e046      	b.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d124      	bne.n	8002784 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	e032      	b.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002770:	461a      	mov	r2, r3
 8002772:	2320      	movs	r3, #32
 8002774:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f004 fb85 	bl	8006e8c <HAL_PCD_DataOutStageCallback>
 8002782:	e01d      	b.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d114      	bne.n	80027b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d108      	bne.n	80027b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027ac:	461a      	mov	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	f002 f8a6 	bl	8004900 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f004 fb66 	bl	8006e8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	4f54300a 	.word	0x4f54300a
 80027d0:	4f54310a 	.word	0x4f54310a

080027d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	333c      	adds	r3, #60	; 0x3c
 80027ec:	3304      	adds	r3, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <PCD_EP_OutSetupPacket_int+0x88>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d90e      	bls.n	8002828 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002820:	461a      	mov	r2, r3
 8002822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002826:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f004 fb1d 	bl	8006e68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <PCD_EP_OutSetupPacket_int+0x88>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d90c      	bls.n	8002850 <PCD_EP_OutSetupPacket_int+0x7c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002848:	461a      	mov	r2, r3
 800284a:	2101      	movs	r1, #1
 800284c:	f002 f858 	bl	8004900 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	4f54300a 	.word	0x4f54300a

08002860 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
 800286c:	4613      	mov	r3, r2
 800286e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800287e:	883b      	ldrh	r3, [r7, #0]
 8002880:	0419      	lsls	r1, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	430a      	orrs	r2, r1
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
 800288c:	e028      	b.n	80028e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	4413      	add	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e00d      	b.n	80028be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3340      	adds	r3, #64	; 0x40
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	3301      	adds	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3ec      	bcc.n	80028a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028c8:	883b      	ldrh	r3, [r7, #0]
 80028ca:	0418      	lsls	r0, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	4302      	orrs	r2, r0
 80028d8:	3340      	adds	r3, #64	; 0x40
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e267      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d075      	beq.n	8002a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00c      	beq.n	800296c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295a:	2b08      	cmp	r3, #8
 800295c:	d112      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b82      	ldr	r3, [pc, #520]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296a:	d10b      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d05b      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d157      	bne.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e242      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x74>
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6f      	ldr	r2, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6c      	ldr	r2, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 80029c0:	4b69      	ldr	r3, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fd ffec 	bl	80009bc <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fd ffe8 	bl	80009bc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e207      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xc0>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fd ffd8 	bl	80009bc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fd ffd4 	bl	80009bc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1f3      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d063      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x152>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e1c7      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e03a      	b.n	8002b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_RCC_OscConfig+0x244>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fd ff8d 	bl	80009bc <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7fd ff89 	bl	80009bc <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1a8      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4925      	ldr	r1, [pc, #148]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
 8002ad8:	e015      	b.n	8002b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x244>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fd ff6c 	bl	80009bc <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7fd ff68 	bl	80009bc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e187      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x248>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fd ff4c 	bl	80009bc <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b28:	f7fd ff48 	bl	80009bc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e167      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x200>
 8002b46:	e01b      	b.n	8002b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_OscConfig+0x248>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fd ff35 	bl	80009bc <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	e00e      	b.n	8002b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fd ff31 	bl	80009bc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d907      	bls.n	8002b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e150      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	42470000 	.word	0x42470000
 8002b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ea      	bne.n	8002b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8097 	beq.w	8002cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b81      	ldr	r3, [pc, #516]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a7c      	ldr	r2, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b7a      	ldr	r3, [pc, #488]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b77      	ldr	r3, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a73      	ldr	r2, [pc, #460]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7fd fef1 	bl	80009bc <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fd feed 	bl	80009bc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e10c      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2ea>
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a63      	ldr	r2, [pc, #396]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x324>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x30c>
 8002c1a:	4b5f      	ldr	r3, [pc, #380]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x324>
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0304 	bic.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fd feb2 	bl	80009bc <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fd feae 	bl	80009bc <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0cb      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ee      	beq.n	8002c5c <HAL_RCC_OscConfig+0x334>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fd fe9c 	bl	80009bc <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fd fe98 	bl	80009bc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0b5      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	4a38      	ldr	r2, [pc, #224]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a1 	beq.w	8002e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d05c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d141      	bne.n	8002d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fe6c 	bl	80009bc <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fd fe68 	bl	80009bc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e087      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	491b      	ldr	r1, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fd fe41 	bl	80009bc <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fd fe3d 	bl	80009bc <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e05c      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x416>
 8002d5c:	e054      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fd fe2a 	bl	80009bc <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fd fe26 	bl	80009bc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e045      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x444>
 8002d8a:	e03d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e038      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4ec>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d028      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d121      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800

08002e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0cc      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d90c      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b8      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e84:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d044      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d119      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e06f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e067      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f08:	f7fd fd58 	bl	80009bc <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fd fd54 	bl	80009bc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e04f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d20c      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e032      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f9e:	f000 f821 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	490a      	ldr	r1, [pc, #40]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	5ccb      	ldrb	r3, [r1, r3]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fcb8 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	080074a0 	.word	0x080074a0
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b090      	sub	sp, #64	; 0x40
 8002fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d00d      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x40>
 8003008:	2b08      	cmp	r3, #8
 800300a:	f200 80a1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x16c>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x34>
 8003012:	2b04      	cmp	r3, #4
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x3a>
 8003016:	e09b      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_GetSysClockFreq+0x184>)
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800301c:	e09b      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_GetSysClockFreq+0x188>)
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003022:	e098      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003024:	4b4f      	ldr	r3, [pc, #316]	; (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302e:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d028      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	2200      	movs	r2, #0
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	627a      	str	r2, [r7, #36]	; 0x24
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800304c:	2100      	movs	r1, #0
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_GetSysClockFreq+0x188>)
 8003050:	fb03 f201 	mul.w	r2, r3, r1
 8003054:	2300      	movs	r3, #0
 8003056:	fb00 f303 	mul.w	r3, r0, r3
 800305a:	4413      	add	r3, r2
 800305c:	4a43      	ldr	r2, [pc, #268]	; (800316c <HAL_RCC_GetSysClockFreq+0x188>)
 800305e:	fba0 1202 	umull	r1, r2, r0, r2
 8003062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003064:	460a      	mov	r2, r1
 8003066:	62ba      	str	r2, [r7, #40]	; 0x28
 8003068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306a:	4413      	add	r3, r2
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	2200      	movs	r2, #0
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	61fa      	str	r2, [r7, #28]
 8003076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800307e:	f7fd f8b3 	bl	80001e8 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4613      	mov	r3, r2
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308a:	e053      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b35      	ldr	r3, [pc, #212]	; (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	617a      	str	r2, [r7, #20]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800309e:	f04f 0b00 	mov.w	fp, #0
 80030a2:	4652      	mov	r2, sl
 80030a4:	465b      	mov	r3, fp
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	ebb2 080a 	subs.w	r8, r2, sl
 80030be:	eb63 090b 	sbc.w	r9, r3, fp
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030d6:	ebb2 0408 	subs.w	r4, r2, r8
 80030da:	eb63 0509 	sbc.w	r5, r3, r9
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	00eb      	lsls	r3, r5, #3
 80030e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ec:	00e2      	lsls	r2, r4, #3
 80030ee:	4614      	mov	r4, r2
 80030f0:	461d      	mov	r5, r3
 80030f2:	eb14 030a 	adds.w	r3, r4, sl
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	eb45 030b 	adc.w	r3, r5, fp
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	2200      	movs	r2, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	60fa      	str	r2, [r7, #12]
 8003124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003128:	f7fd f85e 	bl	80001e8 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x184>)
 8003152:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003158:	4618      	mov	r0, r3
 800315a:	3740      	adds	r7, #64	; 0x40
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	017d7840 	.word	0x017d7840

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000

08003188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003188:	b084      	sub	sp, #16
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	f107 001c 	add.w	r0, r7, #28
 8003196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	2b01      	cmp	r3, #1
 800319e:	d122      	bne.n	80031e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 fbee 	bl	80049bc <USB_CoreReset>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e01a      	b.n	800321c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 fbe2 	bl	80049bc <USB_CoreReset>
 80031f8:	4603      	mov	r3, r0
 80031fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
 800320e:	e005      	b.n	800321c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10b      	bne.n	800323a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f043 0206 	orr.w	r2, r3, #6
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003246:	b004      	add	sp, #16
 8003248:	4770      	bx	lr
	...

0800324c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d165      	bne.n	800332c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4a41      	ldr	r2, [pc, #260]	; (8003368 <USB_SetTurnaroundTime+0x11c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d906      	bls.n	8003276 <USB_SetTurnaroundTime+0x2a>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4a40      	ldr	r2, [pc, #256]	; (800336c <USB_SetTurnaroundTime+0x120>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d202      	bcs.n	8003276 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003270:	230f      	movs	r3, #15
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e062      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4a3c      	ldr	r2, [pc, #240]	; (800336c <USB_SetTurnaroundTime+0x120>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d306      	bcc.n	800328c <USB_SetTurnaroundTime+0x40>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <USB_SetTurnaroundTime+0x124>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d202      	bcs.n	800328c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003286:	230e      	movs	r3, #14
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e057      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4a38      	ldr	r2, [pc, #224]	; (8003370 <USB_SetTurnaroundTime+0x124>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d306      	bcc.n	80032a2 <USB_SetTurnaroundTime+0x56>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4a37      	ldr	r2, [pc, #220]	; (8003374 <USB_SetTurnaroundTime+0x128>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d202      	bcs.n	80032a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800329c:	230d      	movs	r3, #13
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e04c      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4a33      	ldr	r2, [pc, #204]	; (8003374 <USB_SetTurnaroundTime+0x128>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d306      	bcc.n	80032b8 <USB_SetTurnaroundTime+0x6c>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4a32      	ldr	r2, [pc, #200]	; (8003378 <USB_SetTurnaroundTime+0x12c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d802      	bhi.n	80032b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80032b2:	230c      	movs	r3, #12
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e041      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <USB_SetTurnaroundTime+0x12c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d906      	bls.n	80032ce <USB_SetTurnaroundTime+0x82>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4a2e      	ldr	r2, [pc, #184]	; (800337c <USB_SetTurnaroundTime+0x130>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d802      	bhi.n	80032ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80032c8:	230b      	movs	r3, #11
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e036      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4a2a      	ldr	r2, [pc, #168]	; (800337c <USB_SetTurnaroundTime+0x130>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d906      	bls.n	80032e4 <USB_SetTurnaroundTime+0x98>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4a29      	ldr	r2, [pc, #164]	; (8003380 <USB_SetTurnaroundTime+0x134>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d802      	bhi.n	80032e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032de:	230a      	movs	r3, #10
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e02b      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4a26      	ldr	r2, [pc, #152]	; (8003380 <USB_SetTurnaroundTime+0x134>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d906      	bls.n	80032fa <USB_SetTurnaroundTime+0xae>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4a25      	ldr	r2, [pc, #148]	; (8003384 <USB_SetTurnaroundTime+0x138>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d202      	bcs.n	80032fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032f4:	2309      	movs	r3, #9
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e020      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4a21      	ldr	r2, [pc, #132]	; (8003384 <USB_SetTurnaroundTime+0x138>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d306      	bcc.n	8003310 <USB_SetTurnaroundTime+0xc4>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4a20      	ldr	r2, [pc, #128]	; (8003388 <USB_SetTurnaroundTime+0x13c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d802      	bhi.n	8003310 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800330a:	2308      	movs	r3, #8
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e015      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <USB_SetTurnaroundTime+0x13c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d906      	bls.n	8003326 <USB_SetTurnaroundTime+0xda>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <USB_SetTurnaroundTime+0x140>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d202      	bcs.n	8003326 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003320:	2307      	movs	r3, #7
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e00a      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003326:	2306      	movs	r3, #6
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e007      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003332:	2309      	movs	r3, #9
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e001      	b.n	800333c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003338:	2309      	movs	r3, #9
 800333a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	029b      	lsls	r3, r3, #10
 8003350:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	00d8acbf 	.word	0x00d8acbf
 800336c:	00e4e1c0 	.word	0x00e4e1c0
 8003370:	00f42400 	.word	0x00f42400
 8003374:	01067380 	.word	0x01067380
 8003378:	011a499f 	.word	0x011a499f
 800337c:	01312cff 	.word	0x01312cff
 8003380:	014ca43f 	.word	0x014ca43f
 8003384:	016e3600 	.word	0x016e3600
 8003388:	01a6ab1f 	.word	0x01a6ab1f
 800338c:	01e84800 	.word	0x01e84800

08003390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d115      	bne.n	8003422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003402:	2001      	movs	r0, #1
 8003404:	f7fd fae6 	bl	80009d4 <HAL_Delay>
      ms++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 fa45 	bl	800489e <USB_GetMode>
 8003414:	4603      	mov	r3, r0
 8003416:	2b01      	cmp	r3, #1
 8003418:	d01e      	beq.n	8003458 <USB_SetCurrentMode+0x84>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b31      	cmp	r3, #49	; 0x31
 800341e:	d9f0      	bls.n	8003402 <USB_SetCurrentMode+0x2e>
 8003420:	e01a      	b.n	8003458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d115      	bne.n	8003454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003434:	2001      	movs	r0, #1
 8003436:	f7fd facd 	bl	80009d4 <HAL_Delay>
      ms++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 fa2c 	bl	800489e <USB_GetMode>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <USB_SetCurrentMode+0x84>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b31      	cmp	r3, #49	; 0x31
 8003450:	d9f0      	bls.n	8003434 <USB_SetCurrentMode+0x60>
 8003452:	e001      	b.n	8003458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e005      	b.n	8003464 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b32      	cmp	r3, #50	; 0x32
 800345c:	d101      	bne.n	8003462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800346c:	b084      	sub	sp, #16
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800347a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e009      	b.n	80034a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	3340      	adds	r3, #64	; 0x40
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	3301      	adds	r3, #1
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b0e      	cmp	r3, #14
 80034a4:	d9f2      	bls.n	800348c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11c      	bne.n	80034e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
 80034e4:	e00b      	b.n	80034fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003504:	461a      	mov	r2, r3
 8003506:	2300      	movs	r3, #0
 8003508:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	4619      	mov	r1, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	461a      	mov	r2, r3
 800351a:	680b      	ldr	r3, [r1, #0]
 800351c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10c      	bne.n	800353e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800352a:	2100      	movs	r1, #0
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f965 	bl	80037fc <USB_SetDevSpeed>
 8003532:	e008      	b.n	8003546 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003534:	2101      	movs	r1, #1
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f960 	bl	80037fc <USB_SetDevSpeed>
 800353c:	e003      	b.n	8003546 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800353e:	2103      	movs	r1, #3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f95b 	bl	80037fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003546:	2110      	movs	r1, #16
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8f3 	bl	8003734 <USB_FlushTxFifo>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f91f 	bl	800379c <USB_FlushRxFifo>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356e:	461a      	mov	r2, r3
 8003570:	2300      	movs	r3, #0
 8003572:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357a:	461a      	mov	r2, r3
 800357c:	2300      	movs	r3, #0
 800357e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	461a      	mov	r2, r3
 8003588:	2300      	movs	r3, #0
 800358a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	e043      	b.n	800361a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a8:	d118      	bne.n	80035dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035bc:	461a      	mov	r2, r3
 80035be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	e013      	b.n	80035ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d2:	461a      	mov	r2, r3
 80035d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e008      	b.n	80035ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	461a      	mov	r2, r3
 80035ea:	2300      	movs	r3, #0
 80035ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	461a      	mov	r2, r3
 80035fc:	2300      	movs	r3, #0
 80035fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3301      	adds	r3, #1
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3b7      	bcc.n	8003592 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	e043      	b.n	80036b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d118      	bne.n	8003672 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	461a      	mov	r2, r3
 8003654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e013      	b.n	8003684 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	461a      	mov	r2, r3
 800366a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	e008      	b.n	8003684 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	461a      	mov	r2, r3
 80036a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3301      	adds	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3b7      	bcc.n	8003628 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <USB_DevInit+0x2c4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f043 0208 	orr.w	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800372c:	b004      	add	sp, #16
 800372e:	4770      	bx	lr
 8003730:	803c3800 	.word	0x803c3800

08003734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a13      	ldr	r2, [pc, #76]	; (8003798 <USB_FlushTxFifo+0x64>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e01b      	b.n	800378c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	daf2      	bge.n	8003742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	019b      	lsls	r3, r3, #6
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a08      	ldr	r2, [pc, #32]	; (8003798 <USB_FlushTxFifo+0x64>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e006      	b.n	800378c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d0f0      	beq.n	800376c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	00030d40 	.word	0x00030d40

0800379c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <USB_FlushRxFifo+0x5c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e018      	b.n	80037ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	daf2      	bge.n	80037a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2210      	movs	r2, #16
 80037ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <USB_FlushRxFifo+0x5c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e006      	b.n	80037ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d0f0      	beq.n	80037cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	00030d40 	.word	0x00030d40

080037fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0306 	and.w	r3, r3, #6
 8003846:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
 8003852:	e00a      	b.n	800386a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d002      	beq.n	8003860 <USB_GetDevSpeed+0x32>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b06      	cmp	r3, #6
 800385e:	d102      	bne.n	8003866 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003860:	2302      	movs	r3, #2
 8003862:	75fb      	strb	r3, [r7, #23]
 8003864:	e001      	b.n	800386a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003866:	230f      	movs	r3, #15
 8003868:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	785b      	ldrb	r3, [r3, #1]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d13a      	bne.n	800390a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d155      	bne.n	8003978 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	791b      	ldrb	r3, [r3, #4]
 80038e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	059b      	lsls	r3, r3, #22
 80038ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038f0:	4313      	orrs	r3, r2
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e036      	b.n	8003978 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003928:	4313      	orrs	r3, r2
 800392a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11a      	bne.n	8003978 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800395e:	430b      	orrs	r3, r1
 8003960:	4313      	orrs	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003976:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d161      	bne.n	8003a68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ba:	d11f      	bne.n	80039fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	0151      	lsls	r1, r2, #5
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	440a      	add	r2, r1
 80039f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a40:	4013      	ands	r3, r2
 8003a42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	0159      	lsls	r1, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	440b      	add	r3, r1
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <USB_DeactivateEndpoint+0x1b0>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
 8003a66:	e060      	b.n	8003b2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a7e:	d11f      	bne.n	8003ac0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003abe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	43db      	mvns	r3, r3
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b04:	4013      	ands	r3, r2
 8003b06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	0159      	lsls	r1, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	4619      	mov	r1, r3
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <USB_DeactivateEndpoint+0x1b4>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	ec337800 	.word	0xec337800
 8003b3c:	eff37800 	.word	0xeff37800

08003b40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 815c 	bne.w	8003e1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d132      	bne.n	8003bd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	0151      	lsls	r1, r2, #5
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	440a      	add	r2, r1
 8003b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	0151      	lsls	r1, r2, #5
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc8:	0cdb      	lsrs	r3, r3, #19
 8003bca:	04db      	lsls	r3, r3, #19
 8003bcc:	6113      	str	r3, [r2, #16]
 8003bce:	e074      	b.n	8003cba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bea:	0cdb      	lsrs	r3, r3, #19
 8003bec:	04db      	lsls	r3, r3, #19
 8003bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	440b      	add	r3, r1
 8003c2c:	1e59      	subs	r1, r3, #1
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c38:	4b9d      	ldr	r3, [pc, #628]	; (8003eb0 <USB_EPStartXfer+0x370>)
 8003c3a:	400b      	ands	r3, r1
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	0148      	lsls	r0, r1, #5
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	4401      	add	r1, r0
 8003c44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	0148      	lsls	r0, r1, #5
 8003c66:	69f9      	ldr	r1, [r7, #28]
 8003c68:	4401      	add	r1, r0
 8003c6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	791b      	ldrb	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d11f      	bne.n	8003cba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d14b      	bne.n	8003d58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d128      	bne.n	8003d36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d110      	bne.n	8003d16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e00f      	b.n	8003d36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e133      	b.n	8003fc0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	791b      	ldrb	r3, [r3, #4]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d015      	beq.n	8003dac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 811b 	beq.w	8003fc0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	69f9      	ldr	r1, [r7, #28]
 8003da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da6:	4313      	orrs	r3, r2
 8003da8:	634b      	str	r3, [r1, #52]	; 0x34
 8003daa:	e109      	b.n	8003fc0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d110      	bne.n	8003dde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e00f      	b.n	8003dfe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	b298      	uxth	r0, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	4603      	mov	r3, r0
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fade 	bl	80043d4 <USB_WritePacket>
 8003e18:	e0d2      	b.n	8003fc0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e34:	0cdb      	lsrs	r3, r3, #19
 8003e36:	04db      	lsls	r3, r3, #19
 8003e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d126      	bne.n	8003eb4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	0148      	lsls	r0, r1, #5
 8003e80:	69f9      	ldr	r1, [r7, #28]
 8003e82:	4401      	add	r1, r0
 8003e84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eaa:	6113      	str	r3, [r2, #16]
 8003eac:	e03a      	b.n	8003f24 <USB_EPStartXfer+0x3e4>
 8003eae:	bf00      	nop
 8003eb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	8afa      	ldrh	r2, [r7, #22]
 8003ed0:	fb03 f202 	mul.w	r2, r3, r2
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	04d9      	lsls	r1, r3, #19
 8003eea:	4b38      	ldr	r3, [pc, #224]	; (8003fcc <USB_EPStartXfer+0x48c>)
 8003eec:	400b      	ands	r3, r1
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	0148      	lsls	r0, r1, #5
 8003ef2:	69f9      	ldr	r1, [r7, #28]
 8003ef4:	4401      	add	r1, r0
 8003ef6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003efa:	4313      	orrs	r3, r2
 8003efc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	0148      	lsls	r0, r1, #5
 8003f18:	69f9      	ldr	r1, [r7, #28]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f20:	4313      	orrs	r3, r2
 8003f22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10d      	bne.n	8003f46 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	460a      	mov	r2, r1
 8003f44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	791b      	ldrb	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d128      	bne.n	8003fa0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d110      	bne.n	8003f80 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00f      	b.n	8003fa0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	1ff80000 	.word	0x1ff80000

08003fd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	f040 80ce 	bne.w	800418e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d132      	bne.n	8004060 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800401c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004058:	0cdb      	lsrs	r3, r3, #19
 800405a:	04db      	lsls	r3, r3, #19
 800405c:	6113      	str	r3, [r2, #16]
 800405e:	e04e      	b.n	80040fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	0cdb      	lsrs	r3, r3, #19
 800407c:	04db      	lsls	r3, r3, #19
 800407e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800409e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d903      	bls.n	80040b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ee:	6939      	ldr	r1, [r7, #16]
 80040f0:	0148      	lsls	r0, r1, #5
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	4401      	add	r1, r0
 80040f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040fa:	4313      	orrs	r3, r2
 80040fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d11e      	bne.n	8004142 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	440a      	add	r2, r1
 8004136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e097      	b.n	8004272 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004160:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8083 	beq.w	8004272 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2101      	movs	r1, #1
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	6979      	ldr	r1, [r7, #20]
 8004184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004188:	4313      	orrs	r3, r2
 800418a:	634b      	str	r3, [r1, #52]	; 0x34
 800418c:	e071      	b.n	8004272 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a8:	0cdb      	lsrs	r3, r3, #19
 80041aa:	04db      	lsls	r3, r3, #19
 80041ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	0148      	lsls	r0, r1, #5
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	4401      	add	r1, r0
 8004228:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d10d      	bne.n	8004252 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6919      	ldr	r1, [r3, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	460a      	mov	r2, r1
 8004250:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004270:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d14a      	bne.n	8004334 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	f040 8086 	bne.w	80043c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004300:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3301      	adds	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f242 7210 	movw	r2, #10000	; 0x2710
 800430e:	4293      	cmp	r3, r2
 8004310:	d902      	bls.n	8004318 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
          break;
 8004316:	e056      	b.n	80043c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800432c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004330:	d0e7      	beq.n	8004302 <USB_EPStopXfer+0x82>
 8004332:	e048      	b.n	80043c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800434c:	d13b      	bne.n	80043c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	440a      	add	r2, r1
 8004368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004370:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f242 7210 	movw	r2, #10000	; 0x2710
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d902      	bls.n	80043ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
          break;
 80043aa:	e00c      	b.n	80043c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c4:	d0e7      	beq.n	8004396 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	460b      	mov	r3, r1
 80043e4:	71fb      	strb	r3, [r7, #7]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d123      	bne.n	8004442 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043fa:	88bb      	ldrh	r3, [r7, #4]
 80043fc:	3303      	adds	r3, #3
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e018      	b.n	800443a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	031a      	lsls	r2, r3, #12
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004414:	461a      	mov	r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3301      	adds	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	3301      	adds	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3301      	adds	r3, #1
 8004432:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	3301      	adds	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d3e2      	bcc.n	8004408 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3724      	adds	r7, #36	; 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004450:	b480      	push	{r7}
 8004452:	b08b      	sub	sp, #44	; 0x2c
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	b29b      	uxth	r3, r3
 800446c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
 800447a:	e014      	b.n	80044a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	601a      	str	r2, [r3, #0]
    pDest++;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	3301      	adds	r3, #1
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	3301      	adds	r3, #1
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	3301      	adds	r3, #1
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	3301      	adds	r3, #1
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	3301      	adds	r3, #1
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d3e6      	bcc.n	800447c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044ae:	8bfb      	ldrh	r3, [r7, #30]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01e      	beq.n	80044f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	461a      	mov	r2, r3
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	701a      	strb	r2, [r3, #0]
      i++;
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	3301      	adds	r3, #1
 80044de:	623b      	str	r3, [r7, #32]
      pDest++;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	3301      	adds	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044e6:	8bfb      	ldrh	r3, [r7, #30]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044ec:	8bfb      	ldrh	r3, [r7, #30]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ea      	bne.n	80044c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	372c      	adds	r7, #44	; 0x2c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d12c      	bne.n	8004576 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	db12      	blt.n	8004554 <USB_EPSetStall+0x54>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00f      	beq.n	8004554 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004552:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e02b      	b.n	80045ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	db12      	blt.n	80045ae <USB_EPSetStall+0xae>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00f      	beq.n	80045ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	0151      	lsls	r1, r2, #5
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	440a      	add	r2, r1
 80045a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d128      	bne.n	800464a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d003      	beq.n	8004628 <USB_EPClearStall+0x4c>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	791b      	ldrb	r3, [r3, #4]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d138      	bne.n	800469a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	0151      	lsls	r1, r2, #5
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	440a      	add	r2, r1
 800463e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e027      	b.n	800469a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004668:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	791b      	ldrb	r3, [r3, #4]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d003      	beq.n	800467a <USB_EPClearStall+0x9e>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	791b      	ldrb	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d10f      	bne.n	800469a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800470e:	f023 0303 	bic.w	r3, r3, #3
 8004712:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004722:	f023 0302 	bic.w	r3, r3, #2
 8004726:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004750:	f023 0303 	bic.w	r3, r3, #3
 8004754:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004790:	68fb      	ldr	r3, [r7, #12]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0c1b      	lsrs	r3, r3, #16
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	b29b      	uxth	r3, r3
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004834:	68bb      	ldr	r3, [r7, #8]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004842:	b480      	push	{r7}
 8004844:	b087      	sub	sp, #28
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	b2db      	uxtb	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4013      	ands	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004890:	68bb      	ldr	r3, [r7, #8]
}
 8004892:	4618      	mov	r0, r3
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0301 	and.w	r3, r3, #1
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	460b      	mov	r3, r1
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	333c      	adds	r3, #60	; 0x3c
 8004916:	3304      	adds	r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <USB_EP0_OutStart+0xb8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d90a      	bls.n	800493a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004934:	d101      	bne.n	800493a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e037      	b.n	80049aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004968:	f043 0318 	orr.w	r3, r3, #24
 800496c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004980:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10f      	bne.n	80049a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	4f54300a 	.word	0x4f54300a

080049bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <USB_CoreReset+0x64>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e01b      	b.n	8004a12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	daf2      	bge.n	80049c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <USB_CoreReset+0x64>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d0f0      	beq.n	80049f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	00030d40 	.word	0x00030d40

08004a24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a34:	f002 fc8a 	bl	800734c <USBD_static_malloc>
 8004a38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	32b0      	adds	r2, #176	; 0xb0
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0d4      	b.n	8004bfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004a54:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004a58:	2100      	movs	r1, #0
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f002 fcde 	bl	800741c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	32b0      	adds	r2, #176	; 0xb0
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	32b0      	adds	r2, #176	; 0xb0
 8004a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7c1b      	ldrb	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d138      	bne.n	8004afe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004a8c:	4b5e      	ldr	r3, [pc, #376]	; (8004c08 <USBD_CDC_Init+0x1e4>)
 8004a8e:	7819      	ldrb	r1, [r3, #0]
 8004a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a94:	2202      	movs	r2, #2
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f002 fb35 	bl	8007106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a9c:	4b5a      	ldr	r3, [pc, #360]	; (8004c08 <USBD_CDC_Init+0x1e4>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3324      	adds	r3, #36	; 0x24
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ab6:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <USBD_CDC_Init+0x1e8>)
 8004ab8:	7819      	ldrb	r1, [r3, #0]
 8004aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004abe:	2202      	movs	r2, #2
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f002 fb20 	bl	8007106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ac6:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <USBD_CDC_Init+0x1e8>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f003 020f 	and.w	r2, r3, #15
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ade:	2201      	movs	r2, #1
 8004ae0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ae2:	4b4b      	ldr	r3, [pc, #300]	; (8004c10 <USBD_CDC_Init+0x1ec>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f003 020f 	and.w	r2, r3, #15
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	3326      	adds	r3, #38	; 0x26
 8004af8:	2210      	movs	r2, #16
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	e035      	b.n	8004b6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004afe:	4b42      	ldr	r3, [pc, #264]	; (8004c08 <USBD_CDC_Init+0x1e4>)
 8004b00:	7819      	ldrb	r1, [r3, #0]
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	2202      	movs	r2, #2
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f002 fafd 	bl	8007106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <USBD_CDC_Init+0x1e4>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f003 020f 	and.w	r2, r3, #15
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	2201      	movs	r2, #1
 8004b24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b26:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <USBD_CDC_Init+0x1e8>)
 8004b28:	7819      	ldrb	r1, [r3, #0]
 8004b2a:	2340      	movs	r3, #64	; 0x40
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f002 fae9 	bl	8007106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b34:	4b35      	ldr	r3, [pc, #212]	; (8004c0c <USBD_CDC_Init+0x1e8>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b50:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <USBD_CDC_Init+0x1ec>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3326      	adds	r3, #38	; 0x26
 8004b66:	2210      	movs	r2, #16
 8004b68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b6a:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <USBD_CDC_Init+0x1ec>)
 8004b6c:	7819      	ldrb	r1, [r3, #0]
 8004b6e:	2308      	movs	r3, #8
 8004b70:	2203      	movs	r2, #3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f002 fac7 	bl	8007106 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <USBD_CDC_Init+0x1ec>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f003 020f 	and.w	r2, r3, #15
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3324      	adds	r3, #36	; 0x24
 8004b8e:	2201      	movs	r2, #1
 8004b90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	33b0      	adds	r3, #176	; 0xb0
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e018      	b.n	8004bfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7c1b      	ldrb	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <USBD_CDC_Init+0x1e8>)
 8004bd6:	7819      	ldrb	r1, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f002 fb7e 	bl	80072e4 <USBD_LL_PrepareReceive>
 8004be8:	e008      	b.n	8004bfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <USBD_CDC_Init+0x1e8>)
 8004bec:	7819      	ldrb	r1, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bf4:	2340      	movs	r3, #64	; 0x40
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f002 fb74 	bl	80072e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000093 	.word	0x20000093
 8004c0c:	20000094 	.word	0x20000094
 8004c10:	20000095 	.word	0x20000095

08004c14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <USBD_CDC_DeInit+0xf8>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f002 fa93 	bl	8007152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <USBD_CDC_DeInit+0xf8>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	2200      	movs	r2, #0
 8004c44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c46:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <USBD_CDC_DeInit+0xfc>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f002 fa80 	bl	8007152 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <USBD_CDC_DeInit+0xfc>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <USBD_CDC_DeInit+0x100>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f002 fa6c 	bl	8007152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <USBD_CDC_DeInit+0x100>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	f003 020f 	and.w	r2, r3, #15
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	2200      	movs	r2, #0
 8004c92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <USBD_CDC_DeInit+0x100>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3326      	adds	r3, #38	; 0x26
 8004caa:	2200      	movs	r2, #0
 8004cac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	32b0      	adds	r2, #176	; 0xb0
 8004cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01f      	beq.n	8004d00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	33b0      	adds	r3, #176	; 0xb0
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	32b0      	adds	r2, #176	; 0xb0
 8004cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f002 fb40 	bl	8007368 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	32b0      	adds	r2, #176	; 0xb0
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000093 	.word	0x20000093
 8004d10:	20000094 	.word	0x20000094
 8004d14:	20000095 	.word	0x20000095

08004d18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	32b0      	adds	r2, #176	; 0xb0
 8004d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0bf      	b.n	8004ec8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d050      	beq.n	8004df6 <USBD_CDC_Setup+0xde>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 80af 	bne.w	8004eb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	88db      	ldrh	r3, [r3, #6]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d03a      	beq.n	8004dd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	da1b      	bge.n	8004da4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	33b0      	adds	r3, #176	; 0xb0
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004d82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	88d2      	ldrh	r2, [r2, #6]
 8004d88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	88db      	ldrh	r3, [r3, #6]
 8004d8e:	2b07      	cmp	r3, #7
 8004d90:	bf28      	it	cs
 8004d92:	2307      	movcs	r3, #7
 8004d94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	89fa      	ldrh	r2, [r7, #14]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f001 fd89 	bl	80068b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004da2:	e090      	b.n	8004ec6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	785a      	ldrb	r2, [r3, #1]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	88db      	ldrh	r3, [r3, #6]
 8004db2:	2b3f      	cmp	r3, #63	; 0x3f
 8004db4:	d803      	bhi.n	8004dbe <USBD_CDC_Setup+0xa6>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	88db      	ldrh	r3, [r3, #6]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	e000      	b.n	8004dc0 <USBD_CDC_Setup+0xa8>
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004dc6:	6939      	ldr	r1, [r7, #16]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 fd9b 	bl	800690c <USBD_CtlPrepareRx>
      break;
 8004dd6:	e076      	b.n	8004ec6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	33b0      	adds	r3, #176	; 0xb0
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	7850      	ldrb	r0, [r2, #1]
 8004dee:	2200      	movs	r2, #0
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	4798      	blx	r3
      break;
 8004df4:	e067      	b.n	8004ec6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b0b      	cmp	r3, #11
 8004dfc:	d851      	bhi.n	8004ea2 <USBD_CDC_Setup+0x18a>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <USBD_CDC_Setup+0xec>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004eb1 	.word	0x08004eb1
 8004e0c:	08004ea3 	.word	0x08004ea3
 8004e10:	08004ea3 	.word	0x08004ea3
 8004e14:	08004ea3 	.word	0x08004ea3
 8004e18:	08004ea3 	.word	0x08004ea3
 8004e1c:	08004ea3 	.word	0x08004ea3
 8004e20:	08004ea3 	.word	0x08004ea3
 8004e24:	08004ea3 	.word	0x08004ea3
 8004e28:	08004ea3 	.word	0x08004ea3
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e89 	.word	0x08004e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d107      	bne.n	8004e50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e40:	f107 030a 	add.w	r3, r7, #10
 8004e44:	2202      	movs	r2, #2
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 fd33 	bl	80068b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e4e:	e032      	b.n	8004eb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 fcbd 	bl	80067d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004e5c:	e02b      	b.n	8004eb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d107      	bne.n	8004e7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e6a:	f107 030d 	add.w	r3, r7, #13
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fd1e 	bl	80068b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e78:	e01d      	b.n	8004eb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 fca8 	bl	80067d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e82:	2303      	movs	r3, #3
 8004e84:	75fb      	strb	r3, [r7, #23]
          break;
 8004e86:	e016      	b.n	8004eb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d00f      	beq.n	8004eb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fc9b 	bl	80067d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ea0:	e008      	b.n	8004eb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 fc94 	bl	80067d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	75fb      	strb	r3, [r7, #23]
          break;
 8004eae:	e002      	b.n	8004eb6 <USBD_CDC_Setup+0x19e>
          break;
 8004eb0:	bf00      	nop
 8004eb2:	e008      	b.n	8004ec6 <USBD_CDC_Setup+0x1ae>
          break;
 8004eb4:	bf00      	nop
      }
      break;
 8004eb6:	e006      	b.n	8004ec6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fc89 	bl	80067d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	32b0      	adds	r2, #176	; 0xb0
 8004eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e065      	b.n	8004fc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	32b0      	adds	r2, #176	; 0xb0
 8004f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02f      	beq.n	8004f84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f003 020f 	and.w	r2, r3, #15
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	3318      	adds	r3, #24
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	f003 010f 	and.w	r1, r3, #15
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	460b      	mov	r3, r1
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	440b      	add	r3, r1
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4403      	add	r3, r0
 8004f4c:	3348      	adds	r3, #72	; 0x48
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	3318      	adds	r3, #24
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f76:	78f9      	ldrb	r1, [r7, #3]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f002 f990 	bl	80072a2 <USBD_LL_Transmit>
 8004f82:	e01f      	b.n	8004fc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	33b0      	adds	r3, #176	; 0xb0
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	33b0      	adds	r3, #176	; 0xb0
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	32b0      	adds	r2, #176	; 0xb0
 8004fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	32b0      	adds	r2, #176	; 0xb0
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01a      	b.n	8005036 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f002 f98e 	bl	8007326 <USBD_LL_GetRxDataSize>
 800500a:	4602      	mov	r2, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	33b0      	adds	r3, #176	; 0xb0
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005030:	4611      	mov	r1, r2
 8005032:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	32b0      	adds	r2, #176	; 0xb0
 8005050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005054:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800505c:	2303      	movs	r3, #3
 800505e:	e025      	b.n	80050ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	33b0      	adds	r3, #176	; 0xb0
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01a      	beq.n	80050aa <USBD_CDC_EP0_RxReady+0x6c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800507a:	2bff      	cmp	r3, #255	; 0xff
 800507c:	d015      	beq.n	80050aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	33b0      	adds	r3, #176	; 0xb0
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005096:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800509e:	b292      	uxth	r2, r2
 80050a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80050bc:	2182      	movs	r1, #130	; 0x82
 80050be:	4818      	ldr	r0, [pc, #96]	; (8005120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050c0:	f000 fd4f 	bl	8005b62 <USBD_GetEpDesc>
 80050c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80050c6:	2101      	movs	r1, #1
 80050c8:	4815      	ldr	r0, [pc, #84]	; (8005120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050ca:	f000 fd4a 	bl	8005b62 <USBD_GetEpDesc>
 80050ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80050d0:	2181      	movs	r1, #129	; 0x81
 80050d2:	4813      	ldr	r0, [pc, #76]	; (8005120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050d4:	f000 fd45 	bl	8005b62 <USBD_GetEpDesc>
 80050d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2210      	movs	r2, #16
 80050e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d006      	beq.n	80050fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f4:	711a      	strb	r2, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005108:	711a      	strb	r2, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2243      	movs	r2, #67	; 0x43
 8005112:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000050 	.word	0x20000050

08005124 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800512c:	2182      	movs	r1, #130	; 0x82
 800512e:	4818      	ldr	r0, [pc, #96]	; (8005190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005130:	f000 fd17 	bl	8005b62 <USBD_GetEpDesc>
 8005134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005136:	2101      	movs	r1, #1
 8005138:	4815      	ldr	r0, [pc, #84]	; (8005190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800513a:	f000 fd12 	bl	8005b62 <USBD_GetEpDesc>
 800513e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005140:	2181      	movs	r1, #129	; 0x81
 8005142:	4813      	ldr	r0, [pc, #76]	; (8005190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005144:	f000 fd0d 	bl	8005b62 <USBD_GetEpDesc>
 8005148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2210      	movs	r2, #16
 8005154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2200      	movs	r2, #0
 8005160:	711a      	strb	r2, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f042 0202 	orr.w	r2, r2, #2
 8005168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d006      	beq.n	800517e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	711a      	strb	r2, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f042 0202 	orr.w	r2, r2, #2
 800517c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2243      	movs	r2, #67	; 0x43
 8005182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005184:	4b02      	ldr	r3, [pc, #8]	; (8005190 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000050 	.word	0x20000050

08005194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800519c:	2182      	movs	r1, #130	; 0x82
 800519e:	4818      	ldr	r0, [pc, #96]	; (8005200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051a0:	f000 fcdf 	bl	8005b62 <USBD_GetEpDesc>
 80051a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051a6:	2101      	movs	r1, #1
 80051a8:	4815      	ldr	r0, [pc, #84]	; (8005200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051aa:	f000 fcda 	bl	8005b62 <USBD_GetEpDesc>
 80051ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051b0:	2181      	movs	r1, #129	; 0x81
 80051b2:	4813      	ldr	r0, [pc, #76]	; (8005200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051b4:	f000 fcd5 	bl	8005b62 <USBD_GetEpDesc>
 80051b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2210      	movs	r2, #16
 80051c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d006      	beq.n	80051da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d4:	711a      	strb	r2, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e8:	711a      	strb	r2, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2243      	movs	r2, #67	; 0x43
 80051f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000050 	.word	0x20000050

08005204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	220a      	movs	r2, #10
 8005210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	2000000c 	.word	0x2000000c

08005224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	e009      	b.n	800524c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	33b0      	adds	r3, #176	; 0xb0
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	32b0      	adds	r2, #176	; 0xb0
 800526e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005272:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800527a:	2303      	movs	r3, #3
 800527c:	e008      	b.n	8005290 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	32b0      	adds	r2, #176	; 0xb0
 80052b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	e004      	b.n	80052ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32b0      	adds	r2, #176	; 0xb0
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	32b0      	adds	r2, #176	; 0xb0
 80052fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005306:	2303      	movs	r3, #3
 8005308:	e025      	b.n	8005356 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11f      	bne.n	8005354 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2201      	movs	r2, #1
 8005318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <USBD_CDC_TransmitPacket+0x88>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4403      	add	r3, r0
 8005336:	3318      	adds	r3, #24
 8005338:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <USBD_CDC_TransmitPacket+0x88>)
 800533c:	7819      	ldrb	r1, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 ffa9 	bl	80072a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000093 	.word	0x20000093

08005364 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	32b0      	adds	r2, #176	; 0xb0
 8005376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	32b0      	adds	r2, #176	; 0xb0
 8005386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800538e:	2303      	movs	r3, #3
 8005390:	e018      	b.n	80053c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7c1b      	ldrb	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <USBD_CDC_ReceivePacket+0x68>)
 800539c:	7819      	ldrb	r1, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f001 ff9b 	bl	80072e4 <USBD_LL_PrepareReceive>
 80053ae:	e008      	b.n	80053c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <USBD_CDC_ReceivePacket+0x68>)
 80053b2:	7819      	ldrb	r1, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053ba:	2340      	movs	r3, #64	; 0x40
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 ff91 	bl	80072e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000094 	.word	0x20000094

080053d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e01f      	b.n	8005428 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	79fa      	ldrb	r2, [r7, #7]
 800541a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f001 fe0b 	bl	8007038 <USBD_LL_Init>
 8005422:	4603      	mov	r3, r0
 8005424:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	e025      	b.n	8005494 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	32ae      	adds	r2, #174	; 0xae
 800545a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00f      	beq.n	8005484 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	32ae      	adds	r2, #174	; 0xae
 800546e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f107 020e 	add.w	r2, r7, #14
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
 800547c:	4602      	mov	r2, r0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 fe13 	bl	80070d0 <USBD_LL_Start>
 80054aa:	4603      	mov	r3, r0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80054be:	4618      	mov	r0, r3
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	4611      	mov	r1, r2
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	4611      	mov	r1, r2
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005528:	2303      	movs	r3, #3
 800552a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f001 f908 	bl	800675e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2b02      	cmp	r3, #2
 8005570:	d01a      	beq.n	80055a8 <USBD_LL_SetupStage+0x72>
 8005572:	2b02      	cmp	r3, #2
 8005574:	d822      	bhi.n	80055bc <USBD_LL_SetupStage+0x86>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <USBD_LL_SetupStage+0x4a>
 800557a:	2b01      	cmp	r3, #1
 800557c:	d00a      	beq.n	8005594 <USBD_LL_SetupStage+0x5e>
 800557e:	e01d      	b.n	80055bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fb5f 	bl	8005c4c <USBD_StdDevReq>
 800558e:	4603      	mov	r3, r0
 8005590:	73fb      	strb	r3, [r7, #15]
      break;
 8005592:	e020      	b.n	80055d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fbc7 	bl	8005d30 <USBD_StdItfReq>
 80055a2:	4603      	mov	r3, r0
 80055a4:	73fb      	strb	r3, [r7, #15]
      break;
 80055a6:	e016      	b.n	80055d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fc29 	bl	8005e08 <USBD_StdEPReq>
 80055b6:	4603      	mov	r3, r0
 80055b8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ba:	e00c      	b.n	80055d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fde0 	bl	8007190 <USBD_LL_StallEP>
 80055d0:	4603      	mov	r3, r0
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	bf00      	nop
  }

  return ret;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	460b      	mov	r3, r1
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d16e      	bne.n	80056d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005606:	2b03      	cmp	r3, #3
 8005608:	f040 8098 	bne.w	800573c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	429a      	cmp	r2, r3
 8005616:	d913      	bls.n	8005640 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	1ad2      	subs	r2, r2, r3
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	4293      	cmp	r3, r2
 8005630:	bf28      	it	cs
 8005632:	4613      	movcs	r3, r2
 8005634:	461a      	mov	r2, r3
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f001 f984 	bl	8006946 <USBD_CtlContinueRx>
 800563e:	e07d      	b.n	800573c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2b02      	cmp	r3, #2
 800564c:	d014      	beq.n	8005678 <USBD_LL_DataOutStage+0x98>
 800564e:	2b02      	cmp	r3, #2
 8005650:	d81d      	bhi.n	800568e <USBD_LL_DataOutStage+0xae>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <USBD_LL_DataOutStage+0x7c>
 8005656:	2b01      	cmp	r3, #1
 8005658:	d003      	beq.n	8005662 <USBD_LL_DataOutStage+0x82>
 800565a:	e018      	b.n	800568e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	75bb      	strb	r3, [r7, #22]
            break;
 8005660:	e018      	b.n	8005694 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fa5e 	bl	8005b2e <USBD_CoreFindIF>
 8005672:	4603      	mov	r3, r0
 8005674:	75bb      	strb	r3, [r7, #22]
            break;
 8005676:	e00d      	b.n	8005694 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800567e:	b2db      	uxtb	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa60 	bl	8005b48 <USBD_CoreFindEP>
 8005688:	4603      	mov	r3, r0
 800568a:	75bb      	strb	r3, [r7, #22]
            break;
 800568c:	e002      	b.n	8005694 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	75bb      	strb	r3, [r7, #22]
            break;
 8005692:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005694:	7dbb      	ldrb	r3, [r7, #22]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d119      	bne.n	80056ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d113      	bne.n	80056ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056a6:	7dba      	ldrb	r2, [r7, #22]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	32ae      	adds	r2, #174	; 0xae
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80056b6:	7dba      	ldrb	r2, [r7, #22]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80056be:	7dba      	ldrb	r2, [r7, #22]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	32ae      	adds	r2, #174	; 0xae
 80056c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f001 f94a 	bl	8006968 <USBD_CtlSendStatus>
 80056d4:	e032      	b.n	800573c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80056d6:	7afb      	ldrb	r3, [r7, #11]
 80056d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	4619      	mov	r1, r3
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fa31 	bl	8005b48 <USBD_CoreFindEP>
 80056e6:	4603      	mov	r3, r0
 80056e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056ea:	7dbb      	ldrb	r3, [r7, #22]
 80056ec:	2bff      	cmp	r3, #255	; 0xff
 80056ee:	d025      	beq.n	800573c <USBD_LL_DataOutStage+0x15c>
 80056f0:	7dbb      	ldrb	r3, [r7, #22]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d122      	bne.n	800573c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d117      	bne.n	8005732 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005702:	7dba      	ldrb	r2, [r7, #22]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	32ae      	adds	r2, #174	; 0xae
 8005708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00f      	beq.n	8005732 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005712:	7dba      	ldrb	r2, [r7, #22]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800571a:	7dba      	ldrb	r2, [r7, #22]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	32ae      	adds	r2, #174	; 0xae
 8005720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	7afa      	ldrb	r2, [r7, #11]
 8005728:	4611      	mov	r1, r2
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	4798      	blx	r3
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	e000      	b.n	800573e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	460b      	mov	r3, r1
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d16f      	bne.n	800583a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3314      	adds	r3, #20
 800575e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005766:	2b02      	cmp	r3, #2
 8005768:	d15a      	bne.n	8005820 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	429a      	cmp	r2, r3
 8005774:	d914      	bls.n	80057a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	461a      	mov	r2, r3
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f001 f8ac 	bl	80068ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005792:	2300      	movs	r3, #0
 8005794:	2200      	movs	r2, #0
 8005796:	2100      	movs	r1, #0
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f001 fda3 	bl	80072e4 <USBD_LL_PrepareReceive>
 800579e:	e03f      	b.n	8005820 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d11c      	bne.n	80057e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d316      	bcc.n	80057e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d20f      	bcs.n	80057e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057c6:	2200      	movs	r2, #0
 80057c8:	2100      	movs	r1, #0
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f001 f88d 	bl	80068ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057d8:	2300      	movs	r3, #0
 80057da:	2200      	movs	r2, #0
 80057dc:	2100      	movs	r1, #0
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f001 fd80 	bl	80072e4 <USBD_LL_PrepareReceive>
 80057e4:	e01c      	b.n	8005820 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d10f      	bne.n	8005812 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005812:	2180      	movs	r1, #128	; 0x80
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f001 fcbb 	bl	8007190 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f001 f8b7 	bl	800698e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d03a      	beq.n	80058a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fe42 	bl	80054b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005838:	e032      	b.n	80058a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4619      	mov	r1, r3
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f97f 	bl	8005b48 <USBD_CoreFindEP>
 800584a:	4603      	mov	r3, r0
 800584c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	2bff      	cmp	r3, #255	; 0xff
 8005852:	d025      	beq.n	80058a0 <USBD_LL_DataInStage+0x15a>
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d122      	bne.n	80058a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b03      	cmp	r3, #3
 8005864:	d11c      	bne.n	80058a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005866:	7dfa      	ldrb	r2, [r7, #23]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	32ae      	adds	r2, #174	; 0xae
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d014      	beq.n	80058a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005876:	7dfa      	ldrb	r2, [r7, #23]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800587e:	7dfa      	ldrb	r2, [r7, #23]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	32ae      	adds	r2, #174	; 0xae
 8005884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	7afa      	ldrb	r2, [r7, #11]
 800588c:	4611      	mov	r1, r2
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	4798      	blx	r3
 8005892:	4603      	mov	r3, r0
 8005894:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800589c:	7dbb      	ldrb	r3, [r7, #22]
 800589e:	e000      	b.n	80058a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00e      	beq.n	8005910 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6852      	ldr	r2, [r2, #4]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	4611      	mov	r1, r2
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005910:	2340      	movs	r3, #64	; 0x40
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fbf5 	bl	8007106 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2240      	movs	r2, #64	; 0x40
 8005928:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	2200      	movs	r2, #0
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 fbe7 	bl	8007106 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2240      	movs	r2, #64	; 0x40
 8005942:	621a      	str	r2, [r3, #32]

  return ret;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800597c:	b2da      	uxtb	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2204      	movs	r2, #4
 8005988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d106      	bne.n	80059bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d110      	bne.n	8005a00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	32ae      	adds	r2, #174	; 0xae
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e01c      	b.n	8005a66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d115      	bne.n	8005a64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	32ae      	adds	r2, #174	; 0xae
 8005a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	32ae      	adds	r2, #174	; 0xae
 8005a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	32ae      	adds	r2, #174	; 0xae
 8005a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e01c      	b.n	8005aca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d115      	bne.n	8005ac8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	32ae      	adds	r2, #174	; 0xae
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	32ae      	adds	r2, #174	; 0xae
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00e      	beq.n	8005b24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6852      	ldr	r2, [r2, #4]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	4611      	mov	r1, r2
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	885b      	ldrh	r3, [r3, #2]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d920      	bls.n	8005bcc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005b92:	e013      	b.n	8005bbc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005b94:	f107 030a 	add.w	r3, r7, #10
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f000 f81b 	bl	8005bd6 <USBD_GetNextDesc>
 8005ba0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d108      	bne.n	8005bbc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	789b      	ldrb	r3, [r3, #2]
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d008      	beq.n	8005bca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	885b      	ldrh	r3, [r3, #2]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d8e5      	bhi.n	8005b94 <USBD_GetEpDesc+0x32>
 8005bc8:	e000      	b.n	8005bcc <USBD_GetEpDesc+0x6a>
          break;
 8005bca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005bcc:	693b      	ldr	r3, [r7, #16]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4413      	add	r3, r2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c02:	68fb      	ldr	r3, [r7, #12]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3301      	adds	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c2e:	8a3b      	ldrh	r3, [r7, #16]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	b21a      	sxth	r2, r3
 8005c34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b21b      	sxth	r3, r3
 8005c3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d005      	beq.n	8005c72 <USBD_StdDevReq+0x26>
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d857      	bhi.n	8005d1a <USBD_StdDevReq+0xce>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00f      	beq.n	8005c8e <USBD_StdDevReq+0x42>
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d153      	bne.n	8005d1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	32ae      	adds	r2, #174	; 0xae
 8005c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8c:	e04a      	b.n	8005d24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d83b      	bhi.n	8005d0e <USBD_StdDevReq+0xc2>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <USBD_StdDevReq+0x50>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005d05 	.word	0x08005d05
 8005ca4:	08005d0f 	.word	0x08005d0f
 8005ca8:	08005cfb 	.word	0x08005cfb
 8005cac:	08005d0f 	.word	0x08005d0f
 8005cb0:	08005ccf 	.word	0x08005ccf
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005d0f 	.word	0x08005d0f
 8005cbc:	08005ce7 	.word	0x08005ce7
 8005cc0:	08005cd9 	.word	0x08005cd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa3c 	bl	8006144 <USBD_GetDescriptor>
          break;
 8005ccc:	e024      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fba1 	bl	8006418 <USBD_SetAddress>
          break;
 8005cd6:	e01f      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fbe0 	bl	80064a0 <USBD_SetConfig>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ce4:	e018      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc83 	bl	80065f4 <USBD_GetConfig>
          break;
 8005cee:	e013      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fcb4 	bl	8006660 <USBD_GetStatus>
          break;
 8005cf8:	e00e      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fce3 	bl	80066c8 <USBD_SetFeature>
          break;
 8005d02:	e009      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fd07 	bl	800671a <USBD_ClrFeature>
          break;
 8005d0c:	e004      	b.n	8005d18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fd5e 	bl	80067d2 <USBD_CtlError>
          break;
 8005d16:	bf00      	nop
      }
      break;
 8005d18:	e004      	b.n	8005d24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fd58 	bl	80067d2 <USBD_CtlError>
      break;
 8005d22:	bf00      	nop
  }

  return ret;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop

08005d30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d005      	beq.n	8005d56 <USBD_StdItfReq+0x26>
 8005d4a:	2b40      	cmp	r3, #64	; 0x40
 8005d4c:	d852      	bhi.n	8005df4 <USBD_StdItfReq+0xc4>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <USBD_StdItfReq+0x26>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d14e      	bne.n	8005df4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d840      	bhi.n	8005de6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	889b      	ldrh	r3, [r3, #4]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d836      	bhi.n	8005ddc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	889b      	ldrh	r3, [r3, #4]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fed9 	bl	8005b2e <USBD_CoreFindIF>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	2bff      	cmp	r3, #255	; 0xff
 8005d84:	d01d      	beq.n	8005dc2 <USBD_StdItfReq+0x92>
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11a      	bne.n	8005dc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005d8c:	7bba      	ldrb	r2, [r7, #14]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32ae      	adds	r2, #174	; 0xae
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005d9c:	7bba      	ldrb	r2, [r7, #14]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005da4:	7bba      	ldrb	r2, [r7, #14]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	32ae      	adds	r2, #174	; 0xae
 8005daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005dba:	e004      	b.n	8005dc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005dc0:	e001      	b.n	8005dc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	88db      	ldrh	r3, [r3, #6]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d110      	bne.n	8005df0 <USBD_StdItfReq+0xc0>
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10d      	bne.n	8005df0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fdc7 	bl	8006968 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005dda:	e009      	b.n	8005df0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fcf7 	bl	80067d2 <USBD_CtlError>
          break;
 8005de4:	e004      	b.n	8005df0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fcf2 	bl	80067d2 <USBD_CtlError>
          break;
 8005dee:	e000      	b.n	8005df2 <USBD_StdItfReq+0xc2>
          break;
 8005df0:	bf00      	nop
      }
      break;
 8005df2:	e004      	b.n	8005dfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fceb 	bl	80067d2 <USBD_CtlError>
      break;
 8005dfc:	bf00      	nop
  }

  return ret;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	889b      	ldrh	r3, [r3, #4]
 8005e1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d007      	beq.n	8005e38 <USBD_StdEPReq+0x30>
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	f200 817f 	bhi.w	800612c <USBD_StdEPReq+0x324>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d02a      	beq.n	8005e88 <USBD_StdEPReq+0x80>
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	f040 817a 	bne.w	800612c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fe83 	bl	8005b48 <USBD_CoreFindEP>
 8005e42:	4603      	mov	r3, r0
 8005e44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e46:	7b7b      	ldrb	r3, [r7, #13]
 8005e48:	2bff      	cmp	r3, #255	; 0xff
 8005e4a:	f000 8174 	beq.w	8006136 <USBD_StdEPReq+0x32e>
 8005e4e:	7b7b      	ldrb	r3, [r7, #13]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 8170 	bne.w	8006136 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e56:	7b7a      	ldrb	r2, [r7, #13]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e5e:	7b7a      	ldrb	r2, [r7, #13]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	32ae      	adds	r2, #174	; 0xae
 8005e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8163 	beq.w	8006136 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e70:	7b7a      	ldrb	r2, [r7, #13]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	32ae      	adds	r2, #174	; 0xae
 8005e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	4798      	blx	r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e86:	e156      	b.n	8006136 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d008      	beq.n	8005ea2 <USBD_StdEPReq+0x9a>
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	f300 8145 	bgt.w	8006120 <USBD_StdEPReq+0x318>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 809b 	beq.w	8005fd2 <USBD_StdEPReq+0x1ca>
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d03c      	beq.n	8005f1a <USBD_StdEPReq+0x112>
 8005ea0:	e13e      	b.n	8006120 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d002      	beq.n	8005eb4 <USBD_StdEPReq+0xac>
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d016      	beq.n	8005ee0 <USBD_StdEPReq+0xd8>
 8005eb2:	e02c      	b.n	8005f0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00d      	beq.n	8005ed6 <USBD_StdEPReq+0xce>
 8005eba:	7bbb      	ldrb	r3, [r7, #14]
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d00a      	beq.n	8005ed6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 f963 	bl	8007190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eca:	2180      	movs	r1, #128	; 0x80
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 f95f 	bl	8007190 <USBD_LL_StallEP>
 8005ed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ed4:	e020      	b.n	8005f18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fc7a 	bl	80067d2 <USBD_CtlError>
              break;
 8005ede:	e01b      	b.n	8005f18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	885b      	ldrh	r3, [r3, #2]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10e      	bne.n	8005f06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <USBD_StdEPReq+0xfe>
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d008      	beq.n	8005f06 <USBD_StdEPReq+0xfe>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	88db      	ldrh	r3, [r3, #6]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 f945 	bl	8007190 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fd2e 	bl	8006968 <USBD_CtlSendStatus>

              break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc5e 	bl	80067d2 <USBD_CtlError>
              break;
 8005f16:	bf00      	nop
          }
          break;
 8005f18:	e107      	b.n	800612a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d002      	beq.n	8005f2c <USBD_StdEPReq+0x124>
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d016      	beq.n	8005f58 <USBD_StdEPReq+0x150>
 8005f2a:	e04b      	b.n	8005fc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <USBD_StdEPReq+0x146>
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d00a      	beq.n	8005f4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 f927 	bl	8007190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f42:	2180      	movs	r1, #128	; 0x80
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f923 	bl	8007190 <USBD_LL_StallEP>
 8005f4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f4c:	e040      	b.n	8005fd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fc3e 	bl	80067d2 <USBD_CtlError>
              break;
 8005f56:	e03b      	b.n	8005fd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	885b      	ldrh	r3, [r3, #2]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d136      	bne.n	8005fce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 f92d 	bl	80071ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fcf7 	bl	8006968 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fde2 	bl	8005b48 <USBD_CoreFindEP>
 8005f84:	4603      	mov	r3, r0
 8005f86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f88:	7b7b      	ldrb	r3, [r7, #13]
 8005f8a:	2bff      	cmp	r3, #255	; 0xff
 8005f8c:	d01f      	beq.n	8005fce <USBD_StdEPReq+0x1c6>
 8005f8e:	7b7b      	ldrb	r3, [r7, #13]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11c      	bne.n	8005fce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005f94:	7b7a      	ldrb	r2, [r7, #13]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005f9c:	7b7a      	ldrb	r2, [r7, #13]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	32ae      	adds	r2, #174	; 0xae
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fac:	7b7a      	ldrb	r2, [r7, #13]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32ae      	adds	r2, #174	; 0xae
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005fc2:	e004      	b.n	8005fce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fc03 	bl	80067d2 <USBD_CtlError>
              break;
 8005fcc:	e000      	b.n	8005fd0 <USBD_StdEPReq+0x1c8>
              break;
 8005fce:	bf00      	nop
          }
          break;
 8005fd0:	e0ab      	b.n	800612a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d002      	beq.n	8005fe4 <USBD_StdEPReq+0x1dc>
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d032      	beq.n	8006048 <USBD_StdEPReq+0x240>
 8005fe2:	e097      	b.n	8006114 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <USBD_StdEPReq+0x1f2>
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b80      	cmp	r3, #128	; 0x80
 8005fee:	d004      	beq.n	8005ffa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fbed 	bl	80067d2 <USBD_CtlError>
                break;
 8005ff8:	e091      	b.n	800611e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da0b      	bge.n	800601a <USBD_StdEPReq+0x212>
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	3310      	adds	r3, #16
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	3304      	adds	r3, #4
 8006018:	e00b      	b.n	8006032 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4413      	add	r3, r2
 8006030:	3304      	adds	r3, #4
 8006032:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2202      	movs	r2, #2
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fc37 	bl	80068b4 <USBD_CtlSendData>
              break;
 8006046:	e06a      	b.n	800611e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	da11      	bge.n	8006074 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3324      	adds	r3, #36	; 0x24
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d117      	bne.n	800609a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fbb0 	bl	80067d2 <USBD_CtlError>
                  break;
 8006072:	e054      	b.n	800611e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fb9d 	bl	80067d2 <USBD_CtlError>
                  break;
 8006098:	e041      	b.n	800611e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800609a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da0b      	bge.n	80060ba <USBD_StdEPReq+0x2b2>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	3310      	adds	r3, #16
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	3304      	adds	r3, #4
 80060b8:	e00b      	b.n	80060d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	3304      	adds	r3, #4
 80060d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <USBD_StdEPReq+0x2d8>
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d103      	bne.n	80060e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e00e      	b.n	8006106 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f88d 	bl	800720c <USBD_LL_IsStallEP>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e002      	b.n	8006106 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2202      	movs	r2, #2
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fbd1 	bl	80068b4 <USBD_CtlSendData>
              break;
 8006112:	e004      	b.n	800611e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fb5b 	bl	80067d2 <USBD_CtlError>
              break;
 800611c:	bf00      	nop
          }
          break;
 800611e:	e004      	b.n	800612a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fb55 	bl	80067d2 <USBD_CtlError>
          break;
 8006128:	bf00      	nop
      }
      break;
 800612a:	e005      	b.n	8006138 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fb4f 	bl	80067d2 <USBD_CtlError>
      break;
 8006134:	e000      	b.n	8006138 <USBD_StdEPReq+0x330>
      break;
 8006136:	bf00      	nop
  }

  return ret;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	885b      	ldrh	r3, [r3, #2]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	2b06      	cmp	r3, #6
 8006166:	f200 8128 	bhi.w	80063ba <USBD_GetDescriptor+0x276>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <USBD_GetDescriptor+0x2c>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	0800618d 	.word	0x0800618d
 8006174:	080061a5 	.word	0x080061a5
 8006178:	080061e5 	.word	0x080061e5
 800617c:	080063bb 	.word	0x080063bb
 8006180:	080063bb 	.word	0x080063bb
 8006184:	0800635b 	.word	0x0800635b
 8006188:	08006387 	.word	0x08006387
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
      break;
 80061a2:	e112      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	7c1b      	ldrb	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10d      	bne.n	80061c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
 80061bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	2202      	movs	r2, #2
 80061c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061c6:	e100      	b.n	80063ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f107 0208 	add.w	r2, r7, #8
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
 80061d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	2202      	movs	r2, #2
 80061e0:	701a      	strb	r2, [r3, #0]
      break;
 80061e2:	e0f2      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	f200 80ac 	bhi.w	8006348 <USBD_GetDescriptor+0x204>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <USBD_GetDescriptor+0xb4>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006211 	.word	0x08006211
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006279 	.word	0x08006279
 8006204:	080062ad 	.word	0x080062ad
 8006208:	080062e1 	.word	0x080062e1
 800620c:	08006315 	.word	0x08006315
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	7c12      	ldrb	r2, [r2, #16]
 8006228:	f107 0108 	add.w	r1, r7, #8
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
 8006230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006232:	e091      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 facb 	bl	80067d2 <USBD_CtlError>
            err++;
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	3301      	adds	r3, #1
 8006240:	72fb      	strb	r3, [r7, #11]
          break;
 8006242:	e089      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	7c12      	ldrb	r2, [r2, #16]
 800625c:	f107 0108 	add.w	r1, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006266:	e077      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fab1 	bl	80067d2 <USBD_CtlError>
            err++;
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	3301      	adds	r3, #1
 8006274:	72fb      	strb	r3, [r7, #11]
          break;
 8006276:	e06f      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	7c12      	ldrb	r2, [r2, #16]
 8006290:	f107 0108 	add.w	r1, r7, #8
 8006294:	4610      	mov	r0, r2
 8006296:	4798      	blx	r3
 8006298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800629a:	e05d      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa97 	bl	80067d2 <USBD_CtlError>
            err++;
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	3301      	adds	r3, #1
 80062a8:	72fb      	strb	r3, [r7, #11]
          break;
 80062aa:	e055      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	7c12      	ldrb	r2, [r2, #16]
 80062c4:	f107 0108 	add.w	r1, r7, #8
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ce:	e043      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa7d 	bl	80067d2 <USBD_CtlError>
            err++;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	3301      	adds	r3, #1
 80062dc:	72fb      	strb	r3, [r7, #11]
          break;
 80062de:	e03b      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006302:	e029      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa63 	bl	80067d2 <USBD_CtlError>
            err++;
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	3301      	adds	r3, #1
 8006310:	72fb      	strb	r3, [r7, #11]
          break;
 8006312:	e021      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006336:	e00f      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa49 	bl	80067d2 <USBD_CtlError>
            err++;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	3301      	adds	r3, #1
 8006344:	72fb      	strb	r3, [r7, #11]
          break;
 8006346:	e007      	b.n	8006358 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa41 	bl	80067d2 <USBD_CtlError>
          err++;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3301      	adds	r3, #1
 8006354:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006356:	bf00      	nop
      }
      break;
 8006358:	e037      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	7c1b      	ldrb	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	f107 0208 	add.w	r2, r7, #8
 800636e:	4610      	mov	r0, r2
 8006370:	4798      	blx	r3
 8006372:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006374:	e029      	b.n	80063ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fa2a 	bl	80067d2 <USBD_CtlError>
        err++;
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	3301      	adds	r3, #1
 8006382:	72fb      	strb	r3, [r7, #11]
      break;
 8006384:	e021      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7c1b      	ldrb	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10d      	bne.n	80063aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f107 0208 	add.w	r2, r7, #8
 800639a:	4610      	mov	r0, r2
 800639c:	4798      	blx	r3
 800639e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	2207      	movs	r2, #7
 80063a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063a8:	e00f      	b.n	80063ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fa10 	bl	80067d2 <USBD_CtlError>
        err++;
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	3301      	adds	r3, #1
 80063b6:	72fb      	strb	r3, [r7, #11]
      break;
 80063b8:	e007      	b.n	80063ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa08 	bl	80067d2 <USBD_CtlError>
      err++;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	3301      	adds	r3, #1
 80063c6:	72fb      	strb	r3, [r7, #11]
      break;
 80063c8:	bf00      	nop
  }

  if (err != 0U)
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11e      	bne.n	800640e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	88db      	ldrh	r3, [r3, #6]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d016      	beq.n	8006406 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063d8:	893b      	ldrh	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	88da      	ldrh	r2, [r3, #6]
 80063e2:	893b      	ldrh	r3, [r7, #8]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	bf28      	it	cs
 80063e8:	4613      	movcs	r3, r2
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063ee:	893b      	ldrh	r3, [r7, #8]
 80063f0:	461a      	mov	r2, r3
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa5d 	bl	80068b4 <USBD_CtlSendData>
 80063fa:	e009      	b.n	8006410 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9e7 	bl	80067d2 <USBD_CtlError>
 8006404:	e004      	b.n	8006410 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 faae 	bl	8006968 <USBD_CtlSendStatus>
 800640c:	e000      	b.n	8006410 <USBD_GetDescriptor+0x2cc>
    return;
 800640e:	bf00      	nop
  }
}
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop

08006418 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	889b      	ldrh	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d131      	bne.n	800648e <USBD_SetAddress+0x76>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	88db      	ldrh	r3, [r3, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d12d      	bne.n	800648e <USBD_SetAddress+0x76>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	885b      	ldrh	r3, [r3, #2]
 8006436:	2b7f      	cmp	r3, #127	; 0x7f
 8006438:	d829      	bhi.n	800648e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	885b      	ldrh	r3, [r3, #2]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006444:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b03      	cmp	r3, #3
 8006450:	d104      	bne.n	800645c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9bc 	bl	80067d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645a:	e01d      	b.n	8006498 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7bfa      	ldrb	r2, [r7, #15]
 8006460:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fefb 	bl	8007264 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa7a 	bl	8006968 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	e009      	b.n	8006498 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648c:	e004      	b.n	8006498 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f99e 	bl	80067d2 <USBD_CtlError>
  }
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	885b      	ldrh	r3, [r3, #2]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	4b4e      	ldr	r3, [pc, #312]	; (80065f0 <USBD_SetConfig+0x150>)
 80064b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064b8:	4b4d      	ldr	r3, [pc, #308]	; (80065f0 <USBD_SetConfig+0x150>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d905      	bls.n	80064cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f985 	bl	80067d2 <USBD_CtlError>
    return USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e08c      	b.n	80065e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d002      	beq.n	80064de <USBD_SetConfig+0x3e>
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d029      	beq.n	8006530 <USBD_SetConfig+0x90>
 80064dc:	e075      	b.n	80065ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064de:	4b44      	ldr	r3, [pc, #272]	; (80065f0 <USBD_SetConfig+0x150>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d020      	beq.n	8006528 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80064e6:	4b42      	ldr	r3, [pc, #264]	; (80065f0 <USBD_SetConfig+0x150>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064f0:	4b3f      	ldr	r3, [pc, #252]	; (80065f0 <USBD_SetConfig+0x150>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fe ffe7 	bl	80054ca <USBD_SetClassConfig>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f962 	bl	80067d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006516:	e065      	b.n	80065e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fa25 	bl	8006968 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2203      	movs	r2, #3
 8006522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006526:	e05d      	b.n	80065e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fa1d 	bl	8006968 <USBD_CtlSendStatus>
      break;
 800652e:	e059      	b.n	80065e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006530:	4b2f      	ldr	r3, [pc, #188]	; (80065f0 <USBD_SetConfig+0x150>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d112      	bne.n	800655e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006540:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <USBD_SetConfig+0x150>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800654a:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <USBD_SetConfig+0x150>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fe ffd6 	bl	8005502 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa06 	bl	8006968 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800655c:	e042      	b.n	80065e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <USBD_SetConfig+0x150>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d02a      	beq.n	80065c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fe ffc4 	bl	8005502 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800657a:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <USBD_SetConfig+0x150>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006584:	4b1a      	ldr	r3, [pc, #104]	; (80065f0 <USBD_SetConfig+0x150>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fe ff9d 	bl	80054ca <USBD_SetClassConfig>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00f      	beq.n	80065ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f918 	bl	80067d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fe ffa9 	bl	8005502 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065b8:	e014      	b.n	80065e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9d4 	bl	8006968 <USBD_CtlSendStatus>
      break;
 80065c0:	e010      	b.n	80065e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9d0 	bl	8006968 <USBD_CtlSendStatus>
      break;
 80065c8:	e00c      	b.n	80065e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f900 	bl	80067d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <USBD_SetConfig+0x150>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7fe ff92 	bl	8005502 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065de:	2303      	movs	r3, #3
 80065e0:	73fb      	strb	r3, [r7, #15]
      break;
 80065e2:	bf00      	nop
  }

  return ret;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000164 	.word	0x20000164

080065f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	88db      	ldrh	r3, [r3, #6]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d004      	beq.n	8006610 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f8e2 	bl	80067d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800660e:	e023      	b.n	8006658 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	dc02      	bgt.n	8006622 <USBD_GetConfig+0x2e>
 800661c:	2b00      	cmp	r3, #0
 800661e:	dc03      	bgt.n	8006628 <USBD_GetConfig+0x34>
 8006620:	e015      	b.n	800664e <USBD_GetConfig+0x5a>
 8006622:	2b03      	cmp	r3, #3
 8006624:	d00b      	beq.n	800663e <USBD_GetConfig+0x4a>
 8006626:	e012      	b.n	800664e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3308      	adds	r3, #8
 8006632:	2201      	movs	r2, #1
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f93c 	bl	80068b4 <USBD_CtlSendData>
        break;
 800663c:	e00c      	b.n	8006658 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	2201      	movs	r2, #1
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f934 	bl	80068b4 <USBD_CtlSendData>
        break;
 800664c:	e004      	b.n	8006658 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8be 	bl	80067d2 <USBD_CtlError>
        break;
 8006656:	bf00      	nop
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006670:	b2db      	uxtb	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	2b02      	cmp	r3, #2
 8006676:	d81e      	bhi.n	80066b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d004      	beq.n	800668a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8a5 	bl	80067d2 <USBD_CtlError>
        break;
 8006688:	e01a      	b.n	80066c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f043 0202 	orr.w	r2, r3, #2
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	330c      	adds	r3, #12
 80066aa:	2202      	movs	r2, #2
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f900 	bl	80068b4 <USBD_CtlSendData>
      break;
 80066b4:	e004      	b.n	80066c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f88a 	bl	80067d2 <USBD_CtlError>
      break;
 80066be:	bf00      	nop
  }
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	885b      	ldrh	r3, [r3, #2]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d107      	bne.n	80066ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f940 	bl	8006968 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80066e8:	e013      	b.n	8006712 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	885b      	ldrh	r3, [r3, #2]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d10b      	bne.n	800670a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	889b      	ldrh	r3, [r3, #4]
 80066f6:	0a1b      	lsrs	r3, r3, #8
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f930 	bl	8006968 <USBD_CtlSendStatus>
}
 8006708:	e003      	b.n	8006712 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f860 	bl	80067d2 <USBD_CtlError>
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672a:	b2db      	uxtb	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	2b02      	cmp	r3, #2
 8006730:	d80b      	bhi.n	800674a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	885b      	ldrh	r3, [r3, #2]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d10c      	bne.n	8006754 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f910 	bl	8006968 <USBD_CtlSendStatus>
      }
      break;
 8006748:	e004      	b.n	8006754 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f840 	bl	80067d2 <USBD_CtlError>
      break;
 8006752:	e000      	b.n	8006756 <USBD_ClrFeature+0x3c>
      break;
 8006754:	bf00      	nop
  }
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fa41 	bl	8005c10 <SWAPBYTE>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff fa34 	bl	8005c10 <SWAPBYTE>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff fa27 	bl	8005c10 <SWAPBYTE>
 80067c2:	4603      	mov	r3, r0
 80067c4:	461a      	mov	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	80da      	strh	r2, [r3, #6]
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fcd6 	bl	8007190 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fcd2 	bl	8007190 <USBD_LL_StallEP>
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d036      	beq.n	8006878 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800680e:	6938      	ldr	r0, [r7, #16]
 8006810:	f000 f836 	bl	8006880 <USBD_GetLen>
 8006814:	4603      	mov	r3, r0
 8006816:	3301      	adds	r3, #1
 8006818:	b29b      	uxth	r3, r3
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4413      	add	r3, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	701a      	strb	r2, [r3, #0]
  idx++;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	3301      	adds	r3, #1
 8006832:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4413      	add	r3, r2
 800683a:	2203      	movs	r2, #3
 800683c:	701a      	strb	r2, [r3, #0]
  idx++;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	3301      	adds	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006844:	e013      	b.n	800686e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	4413      	add	r3, r2
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3301      	adds	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
    idx++;
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	3301      	adds	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	4413      	add	r3, r2
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
    idx++;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	3301      	adds	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e7      	bne.n	8006846 <USBD_GetString+0x52>
 8006876:	e000      	b.n	800687a <USBD_GetString+0x86>
    return;
 8006878:	bf00      	nop
  }
}
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006890:	e005      	b.n	800689e <USBD_GetLen+0x1e>
  {
    len++;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	3301      	adds	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	3301      	adds	r3, #1
 800689c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f5      	bne.n	8006892 <USBD_GetLen+0x12>
  }

  return len;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	2100      	movs	r1, #0
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fce1 	bl	80072a2 <USBD_LL_Transmit>

  return USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	2100      	movs	r1, #0
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fcd0 	bl	80072a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2203      	movs	r2, #3
 800691c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fcd4 	bl	80072e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	2100      	movs	r1, #0
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fcc3 	bl	80072e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2204      	movs	r2, #4
 8006974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006978:	2300      	movs	r3, #0
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fc8f 	bl	80072a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2205      	movs	r2, #5
 800699a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800699e:	2300      	movs	r3, #0
 80069a0:	2200      	movs	r2, #0
 80069a2:	2100      	movs	r1, #0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc9d 	bl	80072e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069b8:	2200      	movs	r2, #0
 80069ba:	4912      	ldr	r1, [pc, #72]	; (8006a04 <MX_USB_DEVICE_Init+0x50>)
 80069bc:	4812      	ldr	r0, [pc, #72]	; (8006a08 <MX_USB_DEVICE_Init+0x54>)
 80069be:	f7fe fd07 	bl	80053d0 <USBD_Init>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069c8:	f7f9 feb0 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069cc:	490f      	ldr	r1, [pc, #60]	; (8006a0c <MX_USB_DEVICE_Init+0x58>)
 80069ce:	480e      	ldr	r0, [pc, #56]	; (8006a08 <MX_USB_DEVICE_Init+0x54>)
 80069d0:	f7fe fd2e 	bl	8005430 <USBD_RegisterClass>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069da:	f7f9 fea7 	bl	800072c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069de:	490c      	ldr	r1, [pc, #48]	; (8006a10 <MX_USB_DEVICE_Init+0x5c>)
 80069e0:	4809      	ldr	r0, [pc, #36]	; (8006a08 <MX_USB_DEVICE_Init+0x54>)
 80069e2:	f7fe fc1f 	bl	8005224 <USBD_CDC_RegisterInterface>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069ec:	f7f9 fe9e 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069f0:	4805      	ldr	r0, [pc, #20]	; (8006a08 <MX_USB_DEVICE_Init+0x54>)
 80069f2:	f7fe fd53 	bl	800549c <USBD_Start>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069fc:	f7f9 fe96 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a00:	bf00      	nop
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200000ac 	.word	0x200000ac
 8006a08:	20000168 	.word	0x20000168
 8006a0c:	20000018 	.word	0x20000018
 8006a10:	20000098 	.word	0x20000098

08006a14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4905      	ldr	r1, [pc, #20]	; (8006a30 <CDC_Init_FS+0x1c>)
 8006a1c:	4805      	ldr	r0, [pc, #20]	; (8006a34 <CDC_Init_FS+0x20>)
 8006a1e:	f7fe fc1b 	bl	8005258 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a22:	4905      	ldr	r1, [pc, #20]	; (8006a38 <CDC_Init_FS+0x24>)
 8006a24:	4803      	ldr	r0, [pc, #12]	; (8006a34 <CDC_Init_FS+0x20>)
 8006a26:	f7fe fc39 	bl	800529c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20000c44 	.word	0x20000c44
 8006a34:	20000168 	.word	0x20000168
 8006a38:	20000444 	.word	0x20000444

08006a3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	2b23      	cmp	r3, #35	; 0x23
 8006a60:	d84a      	bhi.n	8006af8 <CDC_Control_FS+0xac>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <CDC_Control_FS+0x1c>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006af9 	.word	0x08006af9
 8006a6c:	08006af9 	.word	0x08006af9
 8006a70:	08006af9 	.word	0x08006af9
 8006a74:	08006af9 	.word	0x08006af9
 8006a78:	08006af9 	.word	0x08006af9
 8006a7c:	08006af9 	.word	0x08006af9
 8006a80:	08006af9 	.word	0x08006af9
 8006a84:	08006af9 	.word	0x08006af9
 8006a88:	08006af9 	.word	0x08006af9
 8006a8c:	08006af9 	.word	0x08006af9
 8006a90:	08006af9 	.word	0x08006af9
 8006a94:	08006af9 	.word	0x08006af9
 8006a98:	08006af9 	.word	0x08006af9
 8006a9c:	08006af9 	.word	0x08006af9
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006af9 	.word	0x08006af9
 8006aa8:	08006af9 	.word	0x08006af9
 8006aac:	08006af9 	.word	0x08006af9
 8006ab0:	08006af9 	.word	0x08006af9
 8006ab4:	08006af9 	.word	0x08006af9
 8006ab8:	08006af9 	.word	0x08006af9
 8006abc:	08006af9 	.word	0x08006af9
 8006ac0:	08006af9 	.word	0x08006af9
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006af9 	.word	0x08006af9
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006af9 	.word	0x08006af9
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	08006af9 	.word	0x08006af9
 8006ae4:	08006af9 	.word	0x08006af9
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006af9 	.word	0x08006af9
 8006af0:	08006af9 	.word	0x08006af9
 8006af4:	08006af9 	.word	0x08006af9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006af8:	bf00      	nop
  }

  return (USBD_OK);
 8006afa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	4805      	ldr	r0, [pc, #20]	; (8006b2c <CDC_Receive_FS+0x24>)
 8006b16:	f7fe fbc1 	bl	800529c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b1a:	4804      	ldr	r0, [pc, #16]	; (8006b2c <CDC_Receive_FS+0x24>)
 8006b1c:	f7fe fc22 	bl	8005364 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000168 	.word	0x20000168

08006b30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <CDC_Transmit_FS+0x48>)
 8006b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e00b      	b.n	8006b6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b56:	887b      	ldrh	r3, [r7, #2]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4806      	ldr	r0, [pc, #24]	; (8006b78 <CDC_Transmit_FS+0x48>)
 8006b5e:	f7fe fb7b 	bl	8005258 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b62:	4805      	ldr	r0, [pc, #20]	; (8006b78 <CDC_Transmit_FS+0x48>)
 8006b64:	f7fe fbb8 	bl	80052d8 <USBD_CDC_TransmitPacket>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000168 	.word	0x20000168

08006b7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2212      	movs	r2, #18
 8006bb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	200000c8 	.word	0x200000c8

08006bc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006bd6:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	200000dc 	.word	0x200000dc

08006be8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	4907      	ldr	r1, [pc, #28]	; (8006c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8006bfe:	4808      	ldr	r0, [pc, #32]	; (8006c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c00:	f7ff fdf8 	bl	80067f4 <USBD_GetString>
 8006c04:	e004      	b.n	8006c10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4904      	ldr	r1, [pc, #16]	; (8006c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c0a:	4805      	ldr	r0, [pc, #20]	; (8006c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c0c:	f7ff fdf2 	bl	80067f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c10:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20001444 	.word	0x20001444
 8006c20:	08007458 	.word	0x08007458

08006c24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	6039      	str	r1, [r7, #0]
 8006c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4904      	ldr	r1, [pc, #16]	; (8006c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c34:	4804      	ldr	r0, [pc, #16]	; (8006c48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c36:	f7ff fddd 	bl	80067f4 <USBD_GetString>
  return USBD_StrDesc;
 8006c3a:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20001444 	.word	0x20001444
 8006c48:	08007470 	.word	0x08007470

08006c4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	221a      	movs	r2, #26
 8006c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c5e:	f000 f843 	bl	8006ce8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c62:	4b02      	ldr	r3, [pc, #8]	; (8006c6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	200000e0 	.word	0x200000e0

08006c70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	4907      	ldr	r1, [pc, #28]	; (8006ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c86:	4808      	ldr	r0, [pc, #32]	; (8006ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c88:	f7ff fdb4 	bl	80067f4 <USBD_GetString>
 8006c8c:	e004      	b.n	8006c98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	4904      	ldr	r1, [pc, #16]	; (8006ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c92:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c94:	f7ff fdae 	bl	80067f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c98:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20001444 	.word	0x20001444
 8006ca8:	08007484 	.word	0x08007484

08006cac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	6039      	str	r1, [r7, #0]
 8006cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	4907      	ldr	r1, [pc, #28]	; (8006ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cc2:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cc4:	f7ff fd96 	bl	80067f4 <USBD_GetString>
 8006cc8:	e004      	b.n	8006cd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	4904      	ldr	r1, [pc, #16]	; (8006ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cce:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cd0:	f7ff fd90 	bl	80067f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20001444 	.word	0x20001444
 8006ce4:	08007490 	.word	0x08007490

08006ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <Get_SerialNum+0x44>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <Get_SerialNum+0x48>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cfa:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <Get_SerialNum+0x4c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d0e:	2208      	movs	r2, #8
 8006d10:	4909      	ldr	r1, [pc, #36]	; (8006d38 <Get_SerialNum+0x50>)
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f814 	bl	8006d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d18:	2204      	movs	r2, #4
 8006d1a:	4908      	ldr	r1, [pc, #32]	; (8006d3c <Get_SerialNum+0x54>)
 8006d1c:	68b8      	ldr	r0, [r7, #8]
 8006d1e:	f000 f80f 	bl	8006d40 <IntToUnicode>
  }
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	1fff7a10 	.word	0x1fff7a10
 8006d30:	1fff7a14 	.word	0x1fff7a14
 8006d34:	1fff7a18 	.word	0x1fff7a18
 8006d38:	200000e2 	.word	0x200000e2
 8006d3c:	200000f2 	.word	0x200000f2

08006d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]
 8006d56:	e027      	b.n	8006da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	0f1b      	lsrs	r3, r3, #28
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	d80b      	bhi.n	8006d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	0f1b      	lsrs	r3, r3, #28
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	440b      	add	r3, r1
 8006d70:	3230      	adds	r2, #48	; 0x30
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e00a      	b.n	8006d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	0f1b      	lsrs	r3, r3, #28
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	4619      	mov	r1, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	440b      	add	r3, r1
 8006d88:	3237      	adds	r2, #55	; 0x37
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	3301      	adds	r3, #1
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	3301      	adds	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
 8006da8:	7dfa      	ldrb	r2, [r7, #23]
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3d3      	bcc.n	8006d58 <IntToUnicode+0x18>
  }
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc8:	f107 0314 	add.w	r3, r7, #20
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	605a      	str	r2, [r3, #4]
 8006dd2:	609a      	str	r2, [r3, #8]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006de0:	d13a      	bne.n	8006e58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	6313      	str	r3, [r2, #48]	; 0x30
 8006df2:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006dfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e04:	2302      	movs	r3, #2
 8006e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e10:	230a      	movs	r3, #10
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e14:	f107 0314 	add.w	r3, r7, #20
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4812      	ldr	r0, [pc, #72]	; (8006e64 <HAL_PCD_MspInit+0xa4>)
 8006e1c:	f7fa f982 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <HAL_PCD_MspInit+0xa0>)
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2043      	movs	r0, #67	; 0x43
 8006e4e:	f7fa f932 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e52:	2043      	movs	r0, #67	; 0x43
 8006e54:	f7fa f94b 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3728      	adds	r7, #40	; 0x28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40023800 	.word	0x40023800
 8006e64:	40020000 	.word	0x40020000

08006e68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7fe fb59 	bl	8005536 <USBD_LL_SetupStage>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f7fe fb93 	bl	80055e0 <USBD_LL_DataOutStage>
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	334c      	adds	r3, #76	; 0x4c
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f7fe fc2c 	bl	8005746 <USBD_LL_DataInStage>
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fd60 	bl	80059ca <USBD_LL_SOF>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d001      	beq.n	8006f2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006f26:	f7f9 fc01 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f30:	7bfa      	ldrb	r2, [r7, #15]
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fd0a 	bl	800594e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fcb2 	bl	80058aa <USBD_LL_Reset>
}
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fd05 	bl	800596e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <HAL_PCD_SuspendCallback+0x48>)
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	4a03      	ldr	r2, [pc, #12]	; (8006f98 <HAL_PCD_SuspendCallback+0x48>)
 8006f8a:	f043 0306 	orr.w	r3, r3, #6
 8006f8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fcf5 	bl	800599a <USBD_LL_Resume>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe fd4d 	bl	8005a6e <USBD_LL_IsoOUTIncomplete>
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fd09 	bl	8005a0a <USBD_LL_IsoINIncomplete>
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fd5f 	bl	8005ad2 <USBD_LL_DevConnected>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe fd5c 	bl	8005ae8 <USBD_LL_DevDisconnected>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d13c      	bne.n	80070c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007048:	4a20      	ldr	r2, [pc, #128]	; (80070cc <USBD_LL_Init+0x94>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <USBD_LL_Init+0x94>)
 8007054:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007058:	4b1c      	ldr	r3, [pc, #112]	; (80070cc <USBD_LL_Init+0x94>)
 800705a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800705e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <USBD_LL_Init+0x94>)
 8007062:	2204      	movs	r2, #4
 8007064:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007066:	4b19      	ldr	r3, [pc, #100]	; (80070cc <USBD_LL_Init+0x94>)
 8007068:	2202      	movs	r2, #2
 800706a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800706c:	4b17      	ldr	r3, [pc, #92]	; (80070cc <USBD_LL_Init+0x94>)
 800706e:	2200      	movs	r2, #0
 8007070:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <USBD_LL_Init+0x94>)
 8007074:	2202      	movs	r2, #2
 8007076:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <USBD_LL_Init+0x94>)
 800707a:	2200      	movs	r2, #0
 800707c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <USBD_LL_Init+0x94>)
 8007080:	2200      	movs	r2, #0
 8007082:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007084:	4b11      	ldr	r3, [pc, #68]	; (80070cc <USBD_LL_Init+0x94>)
 8007086:	2200      	movs	r2, #0
 8007088:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800708a:	4b10      	ldr	r3, [pc, #64]	; (80070cc <USBD_LL_Init+0x94>)
 800708c:	2200      	movs	r2, #0
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <USBD_LL_Init+0x94>)
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007096:	480d      	ldr	r0, [pc, #52]	; (80070cc <USBD_LL_Init+0x94>)
 8007098:	f7fa f9c8 	bl	800142c <HAL_PCD_Init>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80070a2:	f7f9 fb43 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80070a6:	2180      	movs	r1, #128	; 0x80
 80070a8:	4808      	ldr	r0, [pc, #32]	; (80070cc <USBD_LL_Init+0x94>)
 80070aa:	f7fb fc20 	bl	80028ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80070ae:	2240      	movs	r2, #64	; 0x40
 80070b0:	2100      	movs	r1, #0
 80070b2:	4806      	ldr	r0, [pc, #24]	; (80070cc <USBD_LL_Init+0x94>)
 80070b4:	f7fb fbd4 	bl	8002860 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80070b8:	2280      	movs	r2, #128	; 0x80
 80070ba:	2101      	movs	r1, #1
 80070bc:	4803      	ldr	r0, [pc, #12]	; (80070cc <USBD_LL_Init+0x94>)
 80070be:	f7fb fbcf 	bl	8002860 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20001644 	.word	0x20001644

080070d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fa fabd 	bl	8001666 <HAL_PCD_Start>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f942 	bl	800737c <USBD_Get_USB_Status>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	461a      	mov	r2, r3
 8007114:	4603      	mov	r3, r0
 8007116:	70fb      	strb	r3, [r7, #3]
 8007118:	460b      	mov	r3, r1
 800711a:	70bb      	strb	r3, [r7, #2]
 800711c:	4613      	mov	r3, r2
 800711e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800712e:	78bb      	ldrb	r3, [r7, #2]
 8007130:	883a      	ldrh	r2, [r7, #0]
 8007132:	78f9      	ldrb	r1, [r7, #3]
 8007134:	f7fa ff8e 	bl	8002054 <HAL_PCD_EP_Open>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f91c 	bl	800737c <USBD_Get_USB_Status>
 8007144:	4603      	mov	r3, r0
 8007146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007148:	7bbb      	ldrb	r3, [r7, #14]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7fa ffd7 	bl	8002124 <HAL_PCD_EP_Close>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f8fd 	bl	800737c <USBD_Get_USB_Status>
 8007182:	4603      	mov	r3, r0
 8007184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007186:	7bbb      	ldrb	r3, [r7, #14]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fb f8af 	bl	8002312 <HAL_PCD_EP_SetStall>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f8de 	bl	800737c <USBD_Get_USB_Status>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	4611      	mov	r1, r2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fb f8f4 	bl	80023da <HAL_PCD_EP_ClrStall>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f8bf 	bl	800737c <USBD_Get_USB_Status>
 80071fe:	4603      	mov	r3, r0
 8007200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007202:	7bbb      	ldrb	r3, [r7, #14]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800721e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da0b      	bge.n	8007240 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	333e      	adds	r3, #62	; 0x3e
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	e00b      	b.n	8007258 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007246:	68f9      	ldr	r1, [r7, #12]
 8007248:	4613      	mov	r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	440b      	add	r3, r1
 8007252:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007256:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f7fa fec1 	bl	800200a <HAL_PCD_SetAddress>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f874 	bl	800737c <USBD_Get_USB_Status>
 8007294:	4603      	mov	r3, r0
 8007296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007298:	7bbb      	ldrb	r3, [r7, #14]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	460b      	mov	r3, r1
 80072b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072c0:	7af9      	ldrb	r1, [r7, #11]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	f7fa ffda 	bl	800227e <HAL_PCD_EP_Transmit>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 f853 	bl	800737c <USBD_Get_USB_Status>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072da:	7dbb      	ldrb	r3, [r7, #22]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	460b      	mov	r3, r1
 80072f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007302:	7af9      	ldrb	r1, [r7, #11]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	f7fa ff56 	bl	80021b8 <HAL_PCD_EP_Receive>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 f832 	bl	800737c <USBD_Get_USB_Status>
 8007318:	4603      	mov	r3, r0
 800731a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800731c:	7dbb      	ldrb	r3, [r7, #22]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f7fa ff86 	bl	800224e <HAL_PCD_EP_GetRxCount>
 8007342:	4603      	mov	r3, r0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007354:	4b03      	ldr	r3, [pc, #12]	; (8007364 <USBD_static_malloc+0x18>)
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20001b50 	.word	0x20001b50

08007368 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]

}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d817      	bhi.n	80073c0 <USBD_Get_USB_Status+0x44>
 8007390:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <USBD_Get_USB_Status+0x1c>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073af 	.word	0x080073af
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073bb 	.word	0x080073bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
    break;
 80073ac:	e00b      	b.n	80073c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073ae:	2303      	movs	r3, #3
 80073b0:	73fb      	strb	r3, [r7, #15]
    break;
 80073b2:	e008      	b.n	80073c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
    break;
 80073b8:	e005      	b.n	80073c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073ba:	2303      	movs	r3, #3
 80073bc:	73fb      	strb	r3, [r7, #15]
    break;
 80073be:	e002      	b.n	80073c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80073c0:	2303      	movs	r3, #3
 80073c2:	73fb      	strb	r3, [r7, #15]
    break;
 80073c4:	bf00      	nop
  }
  return usb_status;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <__libc_init_array>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4d0d      	ldr	r5, [pc, #52]	; (800740c <__libc_init_array+0x38>)
 80073d8:	4c0d      	ldr	r4, [pc, #52]	; (8007410 <__libc_init_array+0x3c>)
 80073da:	1b64      	subs	r4, r4, r5
 80073dc:	10a4      	asrs	r4, r4, #2
 80073de:	2600      	movs	r6, #0
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	d109      	bne.n	80073f8 <__libc_init_array+0x24>
 80073e4:	4d0b      	ldr	r5, [pc, #44]	; (8007414 <__libc_init_array+0x40>)
 80073e6:	4c0c      	ldr	r4, [pc, #48]	; (8007418 <__libc_init_array+0x44>)
 80073e8:	f000 f820 	bl	800742c <_init>
 80073ec:	1b64      	subs	r4, r4, r5
 80073ee:	10a4      	asrs	r4, r4, #2
 80073f0:	2600      	movs	r6, #0
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	d105      	bne.n	8007402 <__libc_init_array+0x2e>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fc:	4798      	blx	r3
 80073fe:	3601      	adds	r6, #1
 8007400:	e7ee      	b.n	80073e0 <__libc_init_array+0xc>
 8007402:	f855 3b04 	ldr.w	r3, [r5], #4
 8007406:	4798      	blx	r3
 8007408:	3601      	adds	r6, #1
 800740a:	e7f2      	b.n	80073f2 <__libc_init_array+0x1e>
 800740c:	080074b8 	.word	0x080074b8
 8007410:	080074b8 	.word	0x080074b8
 8007414:	080074b8 	.word	0x080074b8
 8007418:	080074bc 	.word	0x080074bc

0800741c <memset>:
 800741c:	4402      	add	r2, r0
 800741e:	4603      	mov	r3, r0
 8007420:	4293      	cmp	r3, r2
 8007422:	d100      	bne.n	8007426 <memset+0xa>
 8007424:	4770      	bx	lr
 8007426:	f803 1b01 	strb.w	r1, [r3], #1
 800742a:	e7f9      	b.n	8007420 <memset+0x4>

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
